
(Type NormalDecisionGroup If = normal) = { Inherits = DecisionGroup }
(Type DeJureDecisionGroup If = dejure) = { Inherits = DecisionGroup }
(Type SuccessionLawsDecisionGroup If = succ) = { Inherits = DecisionGroup }
(Type TargetDecisionGroup If = target) = { Inherits = DecisionGroup }
(Type VassalDecisionGroup If = v) = { Inherits = DecisionGroup }
(Type TitleDecisionGroup If = title) = { Inherits = DecisionGroup }
(Type TradePostDecisionGroup If = tp) = { Inherits = DecisionGroup }
(Type FortDecisionGroup If = fort) = { Inherits = DecisionGroup }
(Type SettlementDecisionGroup If = settle) = { Inherits = DecisionGroup }
(Type HospitalDecisionGroup If = hospital) = { Inherits = DecisionGroup }
(Type SocietyDecisionGroup If = society) = { Inherits = DecisionGroup }
(Type OffmapDecisionGroup If = offmap) = { Inherits = DecisionGroup }

(Type DecisionGroup) = {
	# All scopes normal except FROM is artifact scope for potential/allow/effect
	# But let's not deal with it
	(Ch N N) = {
		Left = { "destroy_artifact" "rename_artifact" "rename_wonder" }
		Right = Untyped
		(UniqueId IfNot = Decisions.NoUniqueIdCheck) = Left
	}
	Child = {
		Left = { Type = String }
		Right = DecisionDef
		(LocalOp Validate ID If = Decisions.NoUniqueIdCheck)
		(UniqueId IfNot = Decisions.NoUniqueIdCheck) = Left
		# Not needed for ai-only events
		#(CheckKey "*" Left IfNot = NoCheckKey)
		#(CheckKey "*_desc" Left IfNot = NoCheckKey)
	}
}

(Type DecisionDef) = {
	
	NodeSwitcher = {
		Node = "is_high_prio"
		MarkChecked = False
		Default = {}
		
		Switch = {
			"yes" = {
				# Targeted decisions that are high prio need a _named localization
				(If If = target) = {
					# However, those with a filter of "self" don't need it: https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-99#post-20211840
					NodeSwitcher = {
						Node = "filter"
						MarkChecked = False
						Default = {
							Child = {
								Left = "is_high_prio"
								Right = String
								# Will fall back on decision name if not present
								#(CheckKey "*_named" "^\[L]" IfNot = NoCheckKey)
							}
						}
						
						Switch = {
							"self" = {}
						}
					}
				}
			}
		}
	}
	Optional = { Left = "ai" Right = Bool }
	Optional = { Left = "only_rulers" Right = Bool }
	Optional = { Left = "only_playable" Right = Bool }
	Optional = { Left = "only_independent" Right = Bool }
	Optional = { Left = "is_high_prio" Right = Bool }
	Optional = { Left = "is_mercenary" Right = Bool }
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-89#post-19664325
	# targetted_decisions, settlement_decisions and title_decisions are, so far, the only decision types that can have a from_potential. FROM for the decision is the decision taker, and there is no FROMFROM for the decision (at least so far, who knows what they will add in the future); the scope of from_potential is the FROM of the decision, so FROM shouldn't be valid in it.
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-93#post-19730278 vassal also has from_potential
	# Also trading posts: https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-95#post-19790450
	(Optional If = "target;settle;title;v;tp;offmap") = { Left = "from_potential" Right = FromPotentialDecisionTrigger }
	Optional = { Left = "potential" Right = DecisionTriggerFromFromNone }
	Optional = { Left = "allow" Right = DecisionTriggerFromFromNone }
	
	NodeSwitcher = {
		Node = "third_party_filter"
		MarkChecked = False
		Default = {
			Optional = { Left = "effect" Right = DecisionCommand }
			Optional = { Left = "ai_will_do" Right = AiWillDoFromFromNone }
			(If If = "target") = {
				Optional = { Left = "ai_acceptance" Right = AiAcceptanceDefFromFromNone }
			}
		}
		Switch = {
			"ArtifactFilterTarget:Enum" = {
				Optional = { Left = "effect" Right = CharCommandFromCharFromFromArtifact }
				Optional = { Left = "ai_will_do" Right = AiWillDoFromFromArtifact }
				(If If = "target") = {
					Optional = { Left = "ai_acceptance" Right = AiAcceptanceDefFromFromArtifact }
				}
			}
			
			"FilterTarget:Enum" = {
				Optional = { Left = "effect" Right = CharCommandFromCharFromFromChar }
				Optional = { Left = "ai_will_do" Right = AiWillDoFromFromChar }
				(If If = "target") = {
					Optional = { Left = "ai_acceptance" Right = AiAcceptanceDefFromFromChar }
				}
			}
		}
	}
	
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-132#post-23394736
	#Optional = { Left = "revoke_allowed" Right = DecisionTriggerFromFromNone }
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-132#post-23394736
	# Optional = { Left = "ai_will_revoke" Right = AiWillDo }
	Optional = { Left = "pass_effect" Right = DecisionCommand }
	Optional = { Left = "hide_in_decisions_list" Right = Bool }
	Optional = { Left = "icon_religion" Right = Religion }
	Optional = { Left = "is_in_society" Right = { Bool SocietyThings } }
	Optional = { Left = "ai_check_interval" Right = PInt }
	Optional = { Left = "diplomacy_icon" Right = GfxElement }
	
	(If If = "dejure;succ;normal") = {
		Optional = { Left = "default" Right = Bool }
		Optional = { Left = "default_selection" Right = TitleFactorWeight }
	}
	
	(If If = "offmap") = {
		Optional = { Left = "button_name" Right = String }
	}
	
	(If If = "succ") = {
		Optional = { Left = "vassal_limit" Right = Int }
	}
	
	(If If = "target;tp;title;fort;hospital;offmap") = {
		Optional = { Left = "show_third_party_potential" Right = Bool }
		Optional = { Left = "show_third_party_score" Right = Bool }
		Optional = { Left = "third_party" Right = { Literal = "FROM" Literal = "ROOT" } }
		Optional = { Left = "ai_third_party_filter" Right = ThirdPartyTargetFilter }
		Optional = { Left = "third_party_filter" Right = ThirdPartyTargetFilter }
		
		NodeSwitcher = {
			Node = "third_party_filter"
			MarkChecked = False
			Default = {
			}
			Switch = {
				(FilterTarget:Enum) = {
					Optional = { Left = "third_party_allow" Right = CharTriggerFromCharFromFromChar }
					Optional = { Left = "third_party_potential" Right = CharTriggerFromCharFromFromChar }
					Optional = { Left = "third_party_score" Right = CharFromCharFromFromCharFactorWeight }
				}
				
				(ArtifactFilterTarget:Enum) = {
					Optional = { Left = "third_party_allow" Right = CharTriggerFromCharFromFromArtifact }
					Optional = { Left = "third_party_potential" Right = CharTriggerFromCharFromFromArtifact }
					Optional = { Left = "third_party_score" Right = CharFromCharFromFromArtifactFactorWeight }
				}
			}
		}
	}
	
	(If If = "dejure;succ") = {
		Optional = { Left = "group" Right = String (CheckKey "*" Right IfNot = NoCheckKey) }
			#{ Literal = "centralization" Literal = "temple_tax" 
			#Literal = "investiture_law" Literal = "feudal_tax" Literal = "temple_contract"
			#Literal = "city_tax" Literal = "city_contract" Literal = "feudal_contract" }
			
		Optional = { Left = "default" Right = Bool }
		Optional = { Left = "show_as_title" Right = Bool }
		
		Inherits = CharModifier
	}
	
	(If If = "dejure") = {
		Optional = { Left = "vassal_limit" Right = Int }
		Optional = { Left = "demesne_size" Right = Int }
	}
	
	(If If = "target") = {
		Optional = { Left = "ai_target_filter" Right = FilterTarget }
		Optional = { Left = "filter" Right = FilterTarget }
	}
	
	(If If = "title") = {
		# Optional because may be ai-only
		Optional = { Left = "filter" Right = TitleFilterTarget }
		Optional = { Left = "ai_target_filter" Right = TitleFilterTarget }
	}
	
	(If If = "tp;fort;hospital") = {
		# Optional because may be ai-only
		Optional = { Left = "filter" Right = TradePostFilterTarget }
		Optional = { Left = "ai_target_filter" Right = TradePostFilterTarget }
	}
	
	(If If = "settle") = {
		# Optional because may be ai-only
		Optional = { Left = "filter" Right = SettlementFilterTarget }
		Optional = { Left = "ai_target_filter" Right = SettlementFilterTarget }
	}
}

(Type.Enum FilterTarget) = { Values = {
	none
	self
	court court_including_me
	home_court home_court_including_me
	vassals
	sub_realm sub_realm_including_me
	realm realm_including_me
	dynasty dynasty_including_me
	all all_including_me
	spouse rivals vassal_wars liege close_relatives
	independent_rulers independent_rulers_including_me
	society society_including_me
	religious_head
} }
(Type.Enum TitleFilterTarget) = { Values = { none self demesne capital primary_title owned vassal_owned sub_realm_owned realm_owned dynasty_owned all } }
(Type.Enum TradePostFilterTarget) = { Values = { none capital owned vassal_owned sub_realm_owned realm_owned dynasty_owned } }
(Type.Enum SettlementFilterTarget) = { Values = { none capital owned vassal_owned sub_realm_owned realm_owned dynasty_owned all } }
(Type.Enum ArtifactFilterTarget) = { Values = { none artifacts } }
(Type.Or ThirdPartyTargetFilter) = {
	Type = FilterTarget
	Type = ArtifactFilterTarget
}

{% for scope in [
	{'name': 'AiAcceptanceDefFromFromNone', 'fromfrom': 'None'},
	{'name': 'AiAcceptanceDefFromFromArtifact', 'fromfrom': 'Artifact'},
	{'name': 'AiAcceptanceDefFromFromChar', 'fromfrom': 'Char'},
] %}

(Type {{ scope['name'] }} If = target) = {
	#Single = { Left = "factor" Right = Double }
	Optional = { Left = "yes_threshold" Right = Double }
	Optional = { Left = "show_maybe_for_human" Right = Bool }
	
	Inherits = AiWillDoFromFrom{{ scope['fromfrom'] }}
}

{% endfor %}

{% for scope in [
	{'name': 'AiWillDoFromFromNone', 'fromfrom': 'None'},
	{'name': 'AiWillDoFromFromArtifact', 'fromfrom': 'Artifact'},
	{'name': 'AiWillDoFromFromChar', 'fromfrom': 'Char'},
] %}

(Type {{ scope['name'] }}Base) = {
	(Ch Y N) = { Left = { Type = ScriptedScoreValue } Right = Yes ScriptedScoreValueCheck = {{ scope['name'] }}Base }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFrom{{ scope['fromfrom'] }} }
	(Ch N Y) = { Left = { "modifier" "mult_modifier" } Right = {{ scope['name'] }}Modifier }
	(Ch N Y) = { Left = "additive_modifier" Right = {{ scope['name'] }}AdditiveModifier }
	(Ch N Y) = { Left = "additive_exported_value_modifier" Right = {{ scope['name'] }}AdditiveExportedValueModifier }
}

(Type {{ scope['name'] }}) = {
	Inherits = {{ scope['name'] }}Base
	Single = { Left = "factor" Right = NnDbl }
}

(Type {{ scope['name'] }}Modifier) = {
	Single = { Left = "factor" Right = NnDbl }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFrom{{ scope['fromfrom'] }} }
	Optional = { Left = "localisation_key" Right = Key }
	Inherits = FactorModifier
	Inherits = DecisionTriggerFromFrom{{ scope['fromfrom'] }}
}

(Type {{ scope['name'] }}AdditiveModifier) = {
	Single = { Left = "value" Right = NzDbl }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFrom{{ scope['fromfrom'] }} }
	Optional = { Left = "localisation_key" Right = Key }
	Inherits = FactorModifier
	Inherits = DecisionTriggerFromFrom{{ scope['fromfrom'] }}
}

(Type {{ scope['name'] }}AdditiveExportedValueModifier) = {
	Optional = { Left = "factor" Right = NzDbl }
	Optional = { Left = "localisation_key" Right = Key }
	Single = { Left = "trigger" Right = DecisionTriggerFromFrom{{ scope['fromfrom'] }} }
	Single = { Left = "who" Right = OnlyCharTarget }
	Optional = { Left = "key" Right = String }
	Optional = { Left = "min" Right = Double }
	Optional = { Left = "max" Right = Double }
	Single = { Left = "value" Right = { ExportToVariableGlobalValue ExportToVariableTitleOnlyValue ExportToVariableProvOnlyValue ExportToVariableCharOnlyValue } }
}

(Type DecisionTriggerFromFrom{{ scope['fromfrom'] }}) = {
	(ContextValidator If = "normal") = NormalDecisionTriggerFromFrom{{ scope['fromfrom'] }}
	(ContextValidator If = dejure) = DeJureDecisionTriggerFromFrom{{ scope['fromfrom'] }}
	(NodeSwitcher If = "target") = {
		Node = "^\filter"
		MarkChecked = False
		Default = { ContextValidator = TargetDecisionTriggerFromFrom{{ scope['fromfrom'] }} }
		Switch = {
			"vassal_wars" = { ContextValidator = TargetDecisionTriggerFromFromWar }
		}
	}
	(ContextValidator If = "v;offmap") = TargetDecisionTriggerFromFrom{{ scope['fromfrom'] }}
	(ContextValidator If = "succ;title;tp") = TitleDecisionTriggerFromFrom{{ scope['fromfrom'] }}
	(ContextValidator If = "fort;settle;hospital") = FortDecisionTriggerFromFrom{{ scope['fromfrom'] }}
	(ContextValidator If = "society") = SocietyDecisionTriggerFromFrom{{ scope['fromfrom'] }}
}
{% endfor %}

(ContextValidator TargetDecisionTriggerFromFromWar If = "target") = {
	Inherits = CharTrigger
	FromTarget = Char
	FromFromTarget = War
}

# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-97#post-19886919
(Type FromPotentialDecisionTrigger) = {
	(ContextValidator IfNot="target") = CharTrigger
	(ContextValidator If="target") = TargetDecisionTriggerFromFromNone
}

{% for scope in [
	{'name': 'FromFromNone', 'fromfrom': None},
	{'name': 'FromFromChar', 'fromfrom': 'Char'},
	{'name': 'FromFromArtifact', 'fromfrom': 'Artifact'},
] %}

{% for decision_type in [
	{'name': 'Normal', 'flag': 'normal', 'inherits': 'Char', 'from': None},
	{'name': 'DeJure', 'flag': 'dejure', 'inherits': 'Title', 'from': None},
	{'name': 'Target', 'flag': 'target;v;offmap', 'inherits': 'Char', 'from': 'Char'},
	{'name': 'Title', 'flag': 'succ;title;tp', 'inherits': 'Title', 'from': 'Char'},
	{'name': 'Fort', 'flag': 'fort;settle;hospital', 'inherits': 'Title', 'from': 'Char'},
	{'name': 'Society', 'flag': 'society', 'inherits': 'Char', 'from': None},
] %}
(ContextValidator {{ decision_type['name'] }}DecisionTriggerFromFrom{{ scope['fromfrom'] }} If = "{{ decision_type['flag'] }}") = {
	Inherits = {{ decision_type['inherits'] }}Trigger
	{% if decision_type['from'] %}FromTarget = {{decision_type['from']}}{% endif %}
	{% if scope['fromfrom'] %}FromFromTarget = {{scope['fromfrom']}}{% endif %}
}


(ContextValidator {{ decision_type['name'] }}DecisionCommandFromFrom{{ scope['fromfrom'] }} If = "{{ decision_type['flag'] }}") = {
	Inherits = {{ decision_type['inherits'] }}Command
	{% if decision_type['from'] %}FromTarget = {{decision_type['from']}}{% endif %}
	{% if scope['fromfrom'] %}FromFromTarget = {{scope['fromfrom']}}{% endif %}
}

{% endfor %}
{% endfor %}


(Type DecisionCommand) = {
	(ContextValidator If = "normal") = NormalDecisionCommandFromFromNone
	(ContextValidator If = dejure) = DeJureDecisionCommandFromFromNone
	(NodeSwitcher If = "target") = {
		Node = "^\filter"
		MarkChecked = False
		Default = { ContextValidator = TargetDecisionCommandFromFromNone }
		Switch = {
			"vassal_wars" = { ContextValidator = TargetDecisionCommandFromFromWar }
		}
	}
	(ContextValidator If = "v;offmap") = TargetDecisionCommandFromFromNone
	(ContextValidator If = "succ;title;tp") = TitleDecisionCommandFromFromNone
	(ContextValidator If = "fort;settle;hospital") = FortDecisionCommandFromFromNone
	(ContextValidator If = "society") = SocietyDecisionCommandFromFromNone
}

(ContextValidator TargetDecisionCommandFromFromWar If = "target") = {
	Inherits = CharCommand
	FromTarget = Char
	FromFromTarget = War
}








