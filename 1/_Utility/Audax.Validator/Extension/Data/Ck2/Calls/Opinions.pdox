(ContextValidator CharTrigger) = { Members = {
	# No dedup right because can have comparison ops
	(N Y) = { Left = "opinion" Right = OpinionClause }
	(N Y) = { Left = "reverse_opinion" Right = OpinionClause }
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-88#post-19659893
	# > OK, clan_opinion is something in Title scope (technically clan_title, but Validator is too stupid to check those things), where the "who" also points to a title. Does that sound right? What about reverse_clan_opinion? It seems to be Char to Char.
	# That appears to be right (at least as effects), and reverse_clan_opinion seems to be character to character (at least as triggers). Speculation: clan_opinion and reverse_clan_opinion take title scope as effects, and character scope as triggers. The existing examples do not contradict this.
	# No dedup right because can have comparison ops
	(N Y) = { Left = "clan_opinion" Right = OpinionClause }
	# No dedup right because can have comparison ops
	(N Y) = { Left = { "reverse_clan_opinion" "their_clan_opinion" } Right = OpinionClause }
	# No dedup right because can have comparison ops
	(N Y) = { Left = "personal_opinion" Right = OpinionClause }
	# No dedup right because can have comparison ops
	(N Y) = { Left = "reverse_personal_opinion" Right = OpinionClause }
	# No dedup right because can have comparison ops
	(N Y) = { Left = "their_opinion" Right = OpinionClause }
	(N Y) = { Left = "has_opinion_modifier" Right = OpinionModifierClause }
	(N Y) = { Left = "reverse_has_opinion_modifier" Right = OpinionModifierClause }
	# No dedup right because can have comparison ops
	(N Y) = { Left = "opinion_levy_raised_days" Right = {
		Single = { Left = "who" Right = { MaybeEventTargetCharTitle OpinionClauseDefinedTypes CharTargetExcludingMaybeEventTarget AnyTitle } }
		Single = { Left = "days" Right = { NnInt VariableName } }
	} }
	# No dedup right because can have comparison ops
	(N Y) = { Left = "reverse_opinion_levy_raised_days" Right = {
		Single = { Left = "who" Right = { MaybeEventTargetCharTitle OpinionClauseDefinedTypes CharTargetExcludingMaybeEventTarget AnyTitle } }
		Single = { Left = "days" Right = { NnInt VariableName } }
	} }

} }

(ContextValidator CharCommand) = { Members = {
	(N Y) = { Left = "opinion" Right = OpinionCommand }
	(N Y) = { Left = "reverse_opinion" Right = OpinionCommand }
	(N Y) = { Left = "clan_opinion" Right = ClanOpinionCommand }
	(N Y) = { Left = "clan_reverse_opinion" Right = ClanOpinionCommand }
	
	# The saem opinion modifier can stack: https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-99#post-20223638
	(N N) = { Left = "remove_opinion" Right = RemoveOpinionCommand }
	(N N) = { Left = "reverse_remove_opinion" Right = RemoveOpinionCommand }
	(N N) = { Left = "clan_remove_opinion" Right = RemoveOpinionCommand }
	(N N) = { Left = "clan_reverse_remove_opinion" Right = RemoveOpinionCommand }

	(N Y) = { Left = "vassal_opinion" Right = VassalOpinionCommand }
	(Y  ) = { Left = "set_opinion_levy_raised_days" Right = {
		Single = { Left = "who" Right = OnlyCharTarget }
		Single = { Left = "days" Right = NnInt }
	} }
	(Y  ) = { Left = "reverse_set_opinion_levy_raised_days" Right = {
		Single = { Left = "who" Right = OnlyCharTarget }
		Single = { Left = "days" Right = { NnInt VariableName } }
	} }

} }

(ContextValidator TitleTrigger) = { Members = {
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-95#post-19827422
	(N Y) = { Left = "clan_opinion" Right = OpinionClause }
} }

(ContextValidator TitleCommand) = { Members = {
	(N Y) = { Left = "clan_opinion" Right = ClanOpinionCommand }
	(N Y) = { Left = { "clan_reverse_opinion" "reverse_clan_opinion" } Right = ClanOpinionCommand }
} }

(Type OpinionClause) = {
	Single = { Left = "who" Right = { MaybeEventTargetCharTitle OpinionClauseDefinedTypes CharTargetExcludingMaybeEventTarget AnyTitle RhsFancyScopeOptionToChar } }
	Single = { Left = "value" Right = { Double VariableName } }
	Optional = { Left = "as_if_liege" Right = Bool }
}

(Type OpinionModifierClause) = {
	Single = { Left = "who" Right = { MaybeEventTargetCharTitle OpinionClauseDefinedTypes CharTargetExcludingMaybeEventTarget AnyTitle RhsFancyScopeOptionToChar } }
	Single = { Left = { "name" "modifier" } Right = OpinionModifier }
}

(Type BaseOpinionCommand) = {
	Single = { Left = { "name" "modifier" } Right = OpinionModifier }
	Optional = { Left = "months" Right = PInt }
	Optional = { Left = "years" Right = { Type = PInt Literal = "-1" } }
	Optional = { Left = "duration" Right = { Literal = "-1" } }
	Optional = { Left = "multiplier" Right = NnDbl }
	Optional = { Left = "origin_description" Right = String }
	
	AtMostOne = { "months" "years" "duration" }
}

(Type OpinionCommand) = {
	Inherits = BaseOpinionCommand
	Single = { Left = "who" Right = { MaybeEventTargetCharProvTitle OpinionClauseDefinedTypes New CharTargetExcludingMaybeEventTarget AnyTitle } }
}

(Type ClanOpinionCommand) = {
	Inherits = BaseOpinionCommand
	Single = { Left = "who" Right = { MaybeEventTargetTitle } }
}

(Type VassalOpinionCommand) = {
	Single = { Left = { "name" "modifier" } Right = OpinionModifier }
	Optional = { Left = "months" Right = PInt }
	Optional = { Left = "years" Right = PInt }
	Optional = { Left = "multiplier" Right = NnDbl }
	
	AtMostOne = { "months" "year" }
}

(Type RemoveOpinionCommand) = {
	Single = { Left = { "name" "modifier" } Right = OpinionModifier }
	Single = { Left = "who" Right = { MaybeEventTargetCharProvTitle OpinionClauseDefinedTypes CharTargetExcludingMaybeEventTarget } }
}



















