# has laws, heir stuff, etc

(ContextValidator CharTrigger) = { Members = {
	(N N) = { Left = "current_heir" Right = CharTrigger }
	(N N) = { Left = "crownlaw_title" Right = TitleTrigger }
	(N N) = { Left = "any_heir_title" Right = TitleTriggerWithCount }
	(N N) = { Left = "any_pretender_title" Right = TitleTriggerWithCount }

	(N Y) = { Left = "has_law" Right = Law }
	(Y  ) = { Left = "is_primary_heir" Right = { Bool } }
	(N Y) = { Left = "is_primary_heir" Right = { OnlyCharTarget } }
	(Y  ) = { Left = "is_pretender" Right = Bool }
	
	(Y  ) = { Left = "is_feudal" Right = Bool }
	(Y  ) = { Left = "is_theocracy" Right = Bool }
	(Y  ) = { Left = "is_republic" Right = Bool }
	(Y  ) = { Left = "is_merchant_republic" Right = Bool }
	(Y  ) = { Left = "is_patrician" Right = Bool }
	(N Y) = { Left = "has_de_jure_pretension" Right = { MaybeEventTargetCharProvTitle CharTargetExcludingMaybeEventTarget LandProvince AnyTitle } }
	
} }

(ContextValidator TitleTrigger) = { Members = {
	(N N) = { Left = "crownlaw_title" Right = TitleTrigger }
	
	(N N) = { Left = "current_heir" Right = CharTrigger }

	(N Y) = { Left = "has_law" Right = Law }
	(N Y) = { Left = "would_be_heir_under_law" Right = {
		Single = { Left = "who" Right = MaybeEventTargetChar }
		Single = { Left = "law" Right = SuccessionType }
	} }
	(Y  ) = { Left = "has_crown_law_title" Right = Bool }
	(N Y) = { Left = "has_de_jure_pretension" Right = MaybeEventTargetChar }
	(Y  ) = { Left = "is_pretender" Right = Bool NeedsRootAsChar }
	(Y  ) = { Left = "is_merchant_republic" Right = Bool }
	(Y  ) = { Left = "is_patrician" Right = Bool }

} }

(ContextValidator CharCommand) = { Members = {
	(N N) = { Left = "current_heir" Right = CharCommand }
	
	(N N) = { Left = "crownlaw_title" Right = TitleCommand }
	(N N) = { Left = "any_heir_title" Right = TitleMaybeLimitCommand }
	(N N) = { Left = "any_pretender_title" Right = TitleMaybeLimitCommand }

	(N Y) = { Left = "approve_law" Right = MaybeEventTargetTitle }
	# May need multiple times: https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-99#post-20223638
	(N N) = { Left = "recalc_succession" Right = Yes }
	(N Y) = { Left = "revoke_law" Right = Law }
	
	(Y  ) = { Left = "abdicate" Right = {
		Type = Yes
		Type = {
			Optional = { Left = "move" Right = Bool }
		}
	} }
	(Y  ) = { Left = "abdicate_to_most_liked_by" Right = OnlyCharTarget }
	(Y  ) = { Left = "abdicate_to" Right = OnlyCharTarget }

} }

(ContextValidator TitleCommand) = { Members = {
	(N N) = { Left = "current_heir" Right = CharCommand }

	(N Y) = { Left = "add_law_w_cooldown" Right = Law }
	(N Y) = { Left = "approve_law" Right = Law }
	(N Y) = { Left = "revoke_law" Right = Law }
	(N Y) = { Left = "add_law" Right = Law }
	(N Y) = { Left = "add_law" Right = {
		Optional = { Left = "cooldown" Right = Bool }
		Optional = { Left = "opinion_effect" Right = Bool }
		Single = { Left = "law" Right = Law }
	} }
	(N Y) = { Left = "succession" Right = { ComplexSuccession SuccessionType } }
	(N Y) = { Left = "succession_w_cooldown" Right = { ComplexSuccession SuccessionType } }
	(N Y) = { Left = "gender_succ" Right = { Literal = "cognatic" Literal = "agnatic" Literal = "true_cognatic" Literal = "enatic_cognatic" Literal = "enatic" } }

	(Y  ) = { Left = "set_appoint_generals" Right = Bool }
	(Y  ) = { Left = "set_the_kings_peace" Right = Bool }
	(Y  ) = { Left = "set_the_kings_full_peace" Right = Bool }
	(Y  ) = { Left = "set_protected_inheritance" Right = Bool }
	(Y  ) = { Left = "set_allow_title_revokation" Right = Bool }
	(Y  ) = { Left = "set_allow_free_infidel_revokation" Right = Bool }
	(Y  ) = { Left = "set_allow_free_revokation" Right = Bool }
	(Y  ) = { Left = "set_allow_free_duchy_revokation" Right = Bool }
	(Y  ) = { Left = "set_allow_free_vice_royalty_revokation" Right = Bool }
	(N Y) = { Left = "set_investiture" Right = { Literal = "any" Literal = "head" } }
	(Y  ) = { Left = "law_set_allow_matrilineal_marriage" Right = Bool }
	(Y  ) = { Left = "set_allow_gender_laws" Right = Bool }
	(Y  ) = { Left = "set_allow_feminism" Right = Bool }

} }

(Type ComplexSuccession) = {
	Single = { Left = "base_type" Right = SuccessionType }
	Single = { Left = "voting_rules" Right = SuccessionVotingType }
}

















