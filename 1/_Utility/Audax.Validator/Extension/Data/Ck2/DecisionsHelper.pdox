
(Type NormalDecisionGroup If = normal) = { Inherits = DecisionGroup }
(Type DeJureDecisionGroup If = dejure) = { Inherits = DecisionGroup }
(Type SuccessionLawsDecisionGroup If = succ) = { Inherits = DecisionGroup }
(Type TargetDecisionGroup If = target) = { Inherits = DecisionGroup }
(Type VassalDecisionGroup If = v) = { Inherits = DecisionGroup }
(Type TitleDecisionGroup If = title) = { Inherits = DecisionGroup }
(Type TradePostDecisionGroup If = tp) = { Inherits = DecisionGroup }
(Type FortDecisionGroup If = fort) = { Inherits = DecisionGroup }
(Type SettlementDecisionGroup If = settle) = { Inherits = DecisionGroup }
(Type HospitalDecisionGroup If = hospital) = { Inherits = DecisionGroup }
(Type SocietyDecisionGroup If = society) = { Inherits = DecisionGroup }
(Type OffmapDecisionGroup If = offmap) = { Inherits = DecisionGroup }

(Type DecisionGroup) = {
	# All scopes normal except FROM is artifact scope for potential/allow/effect
	# But let's not deal with it
	(Ch N N) = {
		Left = { "destroy_artifact" "rename_artifact" "rename_wonder" }
		Right = Untyped
		(UniqueId IfNot = Decisions.NoUniqueIdCheck) = Left
	}
	Child = {
		Left = { Type = String }
		Right = DecisionDef
		(LocalOp Validate ID If = Decisions.NoUniqueIdCheck)
		(UniqueId IfNot = Decisions.NoUniqueIdCheck) = Left
		# Not needed for ai-only events
		#(CheckKey "*" Left IfNot = NoCheckKey)
		#(CheckKey "*_desc" Left IfNot = NoCheckKey)
	}
}

(Type DecisionDef) = {
	
	NodeSwitcher = {
		Node = "is_high_prio"
		MarkChecked = False
		Default = {}
		
		Switch = {
			"yes" = {
				# Targeted decisions that are high prio need a _named localization
				(If If = target) = {
					# However, those with a filter of "self" don't need it: https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-99#post-20211840
					NodeSwitcher = {
						Node = "filter"
						MarkChecked = False
						Default = {
							Child = {
								Left = "is_high_prio"
								Right = String
								# Will fall back on decision name if not present
								#(CheckKey "*_named" "^\[L]" IfNot = NoCheckKey)
							}
						}
						
						Switch = {
							"self" = {}
						}
					}
				}
			}
		}
	}
	Optional = { Left = "ai" Right = Bool }
	Optional = { Left = "only_rulers" Right = Bool }
	Optional = { Left = "only_playable" Right = Bool }
	Optional = { Left = "only_independent" Right = Bool }
	Optional = { Left = "is_high_prio" Right = Bool }
	Optional = { Left = "is_mercenary" Right = Bool }
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-89#post-19664325
	# targetted_decisions, settlement_decisions and title_decisions are, so far, the only decision types that can have a from_potential. FROM for the decision is the decision taker, and there is no FROMFROM for the decision (at least so far, who knows what they will add in the future); the scope of from_potential is the FROM of the decision, so FROM shouldn't be valid in it.
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-93#post-19730278 vassal also has from_potential
	# Also trading posts: https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-95#post-19790450
	(Optional If = "target;settle;title;v;tp;offmap") = { Left = "from_potential" Right = FromPotentialDecisionTrigger }
	Optional = { Left = "potential" Right = DecisionTriggerFromFromNone }
	Optional = { Left = "allow" Right = DecisionTriggerFromFromNone }
	
	NodeSwitcher = {
		Node = "third_party_filter"
		MarkChecked = False
		Default = {
			Optional = { Left = "effect" Right = DecisionCommand }
			Optional = { Left = "ai_will_do" Right = AiWillDoFromFromNone }
			(If If = "target") = {
				Optional = { Left = "ai_acceptance" Right = AiAcceptanceDefFromFromNone }
			}
		}
		Switch = {
			"ArtifactFilterTarget:Enum" = {
				Optional = { Left = "effect" Right = CharCommandFromCharFromFromArtifact }
				Optional = { Left = "ai_will_do" Right = AiWillDoFromFromArtifact }
				(If If = "target") = {
					Optional = { Left = "ai_acceptance" Right = AiAcceptanceDefFromFromArtifact }
				}
			}
			
			"FilterTarget:Enum" = {
				Optional = { Left = "effect" Right = CharCommandFromCharFromFromChar }
				Optional = { Left = "ai_will_do" Right = AiWillDoFromFromChar }
				(If If = "target") = {
					Optional = { Left = "ai_acceptance" Right = AiAcceptanceDefFromFromChar }
				}
			}
		}
	}
	
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-132#post-23394736
	#Optional = { Left = "revoke_allowed" Right = DecisionTriggerFromFromNone }
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-132#post-23394736
	# Optional = { Left = "ai_will_revoke" Right = AiWillDo }
	Optional = { Left = "pass_effect" Right = DecisionCommand }
	Optional = { Left = "hide_in_decisions_list" Right = Bool }
	Optional = { Left = "icon_religion" Right = Religion }
	Optional = { Left = "is_in_society" Right = { Bool SocietyThings } }
	Optional = { Left = "ai_check_interval" Right = PInt }
	Optional = { Left = "diplomacy_icon" Right = GfxElement }
	
	(If If = "dejure;succ;normal") = {
		Optional = { Left = "default" Right = Bool }
		Optional = { Left = "default_selection" Right = TitleFactorWeight }
	}
	
	(If If = "offmap") = {
		Optional = { Left = "button_name" Right = String }
	}
	
	(If If = "succ") = {
		Optional = { Left = "vassal_limit" Right = Int }
	}
	
	(If If = "target;tp;title;fort;hospital;offmap") = {
		Optional = { Left = "show_third_party_potential" Right = Bool }
		Optional = { Left = "show_third_party_score" Right = Bool }
		Optional = { Left = "third_party" Right = { Literal = "FROM" Literal = "ROOT" } }
		Optional = { Left = "ai_third_party_filter" Right = ThirdPartyTargetFilter }
		Optional = { Left = "third_party_filter" Right = ThirdPartyTargetFilter }
		
		NodeSwitcher = {
			Node = "third_party_filter"
			MarkChecked = False
			Default = {
			}
			Switch = {
				(FilterTarget:Enum) = {
					Optional = { Left = "third_party_allow" Right = CharTriggerFromCharFromFromChar }
					Optional = { Left = "third_party_potential" Right = CharTriggerFromCharFromFromChar }
					Optional = { Left = "third_party_score" Right = CharFromCharFromFromCharFactorWeight }
				}
				
				(ArtifactFilterTarget:Enum) = {
					Optional = { Left = "third_party_allow" Right = CharTriggerFromCharFromFromArtifact }
					Optional = { Left = "third_party_potential" Right = CharTriggerFromCharFromFromArtifact }
					Optional = { Left = "third_party_score" Right = CharFromCharFromFromArtifactFactorWeight }
				}
			}
		}
	}
	
	(If If = "dejure;succ") = {
		Optional = { Left = "group" Right = String (CheckKey "*" Right IfNot = NoCheckKey) }
			#{ Literal = "centralization" Literal = "temple_tax" 
			#Literal = "investiture_law" Literal = "feudal_tax" Literal = "temple_contract"
			#Literal = "city_tax" Literal = "city_contract" Literal = "feudal_contract" }
			
		Optional = { Left = "default" Right = Bool }
		Optional = { Left = "show_as_title" Right = Bool }
		
		Inherits = CharModifier
	}
	
	(If If = "dejure") = {
		Optional = { Left = "vassal_limit" Right = Int }
		Optional = { Left = "demesne_size" Right = Int }
	}
	
	(If If = "target") = {
		Optional = { Left = "ai_target_filter" Right = FilterTarget }
		Optional = { Left = "filter" Right = FilterTarget }
	}
	
	(If If = "title") = {
		# Optional because may be ai-only
		Optional = { Left = "filter" Right = TitleFilterTarget }
		Optional = { Left = "ai_target_filter" Right = TitleFilterTarget }
	}
	
	(If If = "tp;fort;hospital") = {
		# Optional because may be ai-only
		Optional = { Left = "filter" Right = TradePostFilterTarget }
		Optional = { Left = "ai_target_filter" Right = TradePostFilterTarget }
	}
	
	(If If = "settle") = {
		# Optional because may be ai-only
		Optional = { Left = "filter" Right = SettlementFilterTarget }
		Optional = { Left = "ai_target_filter" Right = SettlementFilterTarget }
	}
}

(Type.Enum FilterTarget) = { Values = {
	none
	self
	court court_including_me
	home_court home_court_including_me
	vassals
	sub_realm sub_realm_including_me
	realm realm_including_me
	dynasty dynasty_including_me
	all all_including_me
	spouse rivals vassal_wars liege close_relatives
	independent_rulers independent_rulers_including_me
	society society_including_me
	religious_head
} }
(Type.Enum TitleFilterTarget) = { Values = { none self demesne capital primary_title owned vassal_owned sub_realm_owned realm_owned dynasty_owned all } }
(Type.Enum TradePostFilterTarget) = { Values = { none capital owned vassal_owned sub_realm_owned realm_owned dynasty_owned } }
(Type.Enum SettlementFilterTarget) = { Values = { none capital owned vassal_owned sub_realm_owned realm_owned dynasty_owned all } }
(Type.Enum ArtifactFilterTarget) = { Values = { none artifacts } }
(Type.Or ThirdPartyTargetFilter) = {
	Type = FilterTarget
	Type = ArtifactFilterTarget
}



(Type AiAcceptanceDefFromFromNone If = target) = {
	#Single = { Left = "factor" Right = Double }
	Optional = { Left = "yes_threshold" Right = Double }
	Optional = { Left = "show_maybe_for_human" Right = Bool }
	
	Inherits = AiWillDoFromFromNone
}



(Type AiAcceptanceDefFromFromArtifact If = target) = {
	#Single = { Left = "factor" Right = Double }
	Optional = { Left = "yes_threshold" Right = Double }
	Optional = { Left = "show_maybe_for_human" Right = Bool }
	
	Inherits = AiWillDoFromFromArtifact
}



(Type AiAcceptanceDefFromFromChar If = target) = {
	#Single = { Left = "factor" Right = Double }
	Optional = { Left = "yes_threshold" Right = Double }
	Optional = { Left = "show_maybe_for_human" Right = Bool }
	
	Inherits = AiWillDoFromFromChar
}





(Type AiWillDoFromFromNoneBase) = {
	(Ch Y N) = { Left = { Type = ScriptedScoreValue } Right = Yes ScriptedScoreValueCheck = AiWillDoFromFromNoneBase }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFromNone }
	(Ch N Y) = { Left = { "modifier" "mult_modifier" } Right = AiWillDoFromFromNoneModifier }
	(Ch N Y) = { Left = "additive_modifier" Right = AiWillDoFromFromNoneAdditiveModifier }
	(Ch N Y) = { Left = "additive_exported_value_modifier" Right = AiWillDoFromFromNoneAdditiveExportedValueModifier }
}

(Type AiWillDoFromFromNone) = {
	Inherits = AiWillDoFromFromNoneBase
	Single = { Left = "factor" Right = NnDbl }
}

(Type AiWillDoFromFromNoneModifier) = {
	Single = { Left = "factor" Right = NnDbl }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFromNone }
	Optional = { Left = "localisation_key" Right = Key }
	Inherits = FactorModifier
	Inherits = DecisionTriggerFromFromNone
}

(Type AiWillDoFromFromNoneAdditiveModifier) = {
	Single = { Left = "value" Right = NzDbl }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFromNone }
	Optional = { Left = "localisation_key" Right = Key }
	Inherits = FactorModifier
	Inherits = DecisionTriggerFromFromNone
}

(Type AiWillDoFromFromNoneAdditiveExportedValueModifier) = {
	Optional = { Left = "factor" Right = NzDbl }
	Optional = { Left = "localisation_key" Right = Key }
	Single = { Left = "trigger" Right = DecisionTriggerFromFromNone }
	Single = { Left = "who" Right = OnlyCharTarget }
	Optional = { Left = "key" Right = String }
	Optional = { Left = "min" Right = Double }
	Optional = { Left = "max" Right = Double }
	Single = { Left = "value" Right = { ExportToVariableGlobalValue ExportToVariableTitleOnlyValue ExportToVariableProvOnlyValue ExportToVariableCharOnlyValue } }
}

(Type DecisionTriggerFromFromNone) = {
	(ContextValidator If = "normal") = NormalDecisionTriggerFromFromNone
	(ContextValidator If = dejure) = DeJureDecisionTriggerFromFromNone
	(NodeSwitcher If = "target") = {
		Node = "^\filter"
		MarkChecked = False
		Default = { ContextValidator = TargetDecisionTriggerFromFromNone }
		Switch = {
			"vassal_wars" = { ContextValidator = TargetDecisionTriggerFromFromWar }
		}
	}
	(ContextValidator If = "v;offmap") = TargetDecisionTriggerFromFromNone
	(ContextValidator If = "succ;title;tp") = TitleDecisionTriggerFromFromNone
	(ContextValidator If = "fort;settle;hospital") = FortDecisionTriggerFromFromNone
	(ContextValidator If = "society") = SocietyDecisionTriggerFromFromNone
}


(Type AiWillDoFromFromArtifactBase) = {
	(Ch Y N) = { Left = { Type = ScriptedScoreValue } Right = Yes ScriptedScoreValueCheck = AiWillDoFromFromArtifactBase }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFromArtifact }
	(Ch N Y) = { Left = { "modifier" "mult_modifier" } Right = AiWillDoFromFromArtifactModifier }
	(Ch N Y) = { Left = "additive_modifier" Right = AiWillDoFromFromArtifactAdditiveModifier }
	(Ch N Y) = { Left = "additive_exported_value_modifier" Right = AiWillDoFromFromArtifactAdditiveExportedValueModifier }
}

(Type AiWillDoFromFromArtifact) = {
	Inherits = AiWillDoFromFromArtifactBase
	Single = { Left = "factor" Right = NnDbl }
}

(Type AiWillDoFromFromArtifactModifier) = {
	Single = { Left = "factor" Right = NnDbl }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFromArtifact }
	Optional = { Left = "localisation_key" Right = Key }
	Inherits = FactorModifier
	Inherits = DecisionTriggerFromFromArtifact
}

(Type AiWillDoFromFromArtifactAdditiveModifier) = {
	Single = { Left = "value" Right = NzDbl }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFromArtifact }
	Optional = { Left = "localisation_key" Right = Key }
	Inherits = FactorModifier
	Inherits = DecisionTriggerFromFromArtifact
}

(Type AiWillDoFromFromArtifactAdditiveExportedValueModifier) = {
	Optional = { Left = "factor" Right = NzDbl }
	Optional = { Left = "localisation_key" Right = Key }
	Single = { Left = "trigger" Right = DecisionTriggerFromFromArtifact }
	Single = { Left = "who" Right = OnlyCharTarget }
	Optional = { Left = "key" Right = String }
	Optional = { Left = "min" Right = Double }
	Optional = { Left = "max" Right = Double }
	Single = { Left = "value" Right = { ExportToVariableGlobalValue ExportToVariableTitleOnlyValue ExportToVariableProvOnlyValue ExportToVariableCharOnlyValue } }
}

(Type DecisionTriggerFromFromArtifact) = {
	(ContextValidator If = "normal") = NormalDecisionTriggerFromFromArtifact
	(ContextValidator If = dejure) = DeJureDecisionTriggerFromFromArtifact
	(NodeSwitcher If = "target") = {
		Node = "^\filter"
		MarkChecked = False
		Default = { ContextValidator = TargetDecisionTriggerFromFromArtifact }
		Switch = {
			"vassal_wars" = { ContextValidator = TargetDecisionTriggerFromFromWar }
		}
	}
	(ContextValidator If = "v;offmap") = TargetDecisionTriggerFromFromArtifact
	(ContextValidator If = "succ;title;tp") = TitleDecisionTriggerFromFromArtifact
	(ContextValidator If = "fort;settle;hospital") = FortDecisionTriggerFromFromArtifact
	(ContextValidator If = "society") = SocietyDecisionTriggerFromFromArtifact
}


(Type AiWillDoFromFromCharBase) = {
	(Ch Y N) = { Left = { Type = ScriptedScoreValue } Right = Yes ScriptedScoreValueCheck = AiWillDoFromFromCharBase }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFromChar }
	(Ch N Y) = { Left = { "modifier" "mult_modifier" } Right = AiWillDoFromFromCharModifier }
	(Ch N Y) = { Left = "additive_modifier" Right = AiWillDoFromFromCharAdditiveModifier }
	(Ch N Y) = { Left = "additive_exported_value_modifier" Right = AiWillDoFromFromCharAdditiveExportedValueModifier }
}

(Type AiWillDoFromFromChar) = {
	Inherits = AiWillDoFromFromCharBase
	Single = { Left = "factor" Right = NnDbl }
}

(Type AiWillDoFromFromCharModifier) = {
	Single = { Left = "factor" Right = NnDbl }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFromChar }
	Optional = { Left = "localisation_key" Right = Key }
	Inherits = FactorModifier
	Inherits = DecisionTriggerFromFromChar
}

(Type AiWillDoFromFromCharAdditiveModifier) = {
	Single = { Left = "value" Right = NzDbl }
	Optional = { Left = "trigger" Right = DecisionTriggerFromFromChar }
	Optional = { Left = "localisation_key" Right = Key }
	Inherits = FactorModifier
	Inherits = DecisionTriggerFromFromChar
}

(Type AiWillDoFromFromCharAdditiveExportedValueModifier) = {
	Optional = { Left = "factor" Right = NzDbl }
	Optional = { Left = "localisation_key" Right = Key }
	Single = { Left = "trigger" Right = DecisionTriggerFromFromChar }
	Single = { Left = "who" Right = OnlyCharTarget }
	Optional = { Left = "key" Right = String }
	Optional = { Left = "min" Right = Double }
	Optional = { Left = "max" Right = Double }
	Single = { Left = "value" Right = { ExportToVariableGlobalValue ExportToVariableTitleOnlyValue ExportToVariableProvOnlyValue ExportToVariableCharOnlyValue } }
}

(Type DecisionTriggerFromFromChar) = {
	(ContextValidator If = "normal") = NormalDecisionTriggerFromFromChar
	(ContextValidator If = dejure) = DeJureDecisionTriggerFromFromChar
	(NodeSwitcher If = "target") = {
		Node = "^\filter"
		MarkChecked = False
		Default = { ContextValidator = TargetDecisionTriggerFromFromChar }
		Switch = {
			"vassal_wars" = { ContextValidator = TargetDecisionTriggerFromFromWar }
		}
	}
	(ContextValidator If = "v;offmap") = TargetDecisionTriggerFromFromChar
	(ContextValidator If = "succ;title;tp") = TitleDecisionTriggerFromFromChar
	(ContextValidator If = "fort;settle;hospital") = FortDecisionTriggerFromFromChar
	(ContextValidator If = "society") = SocietyDecisionTriggerFromFromChar
}


(ContextValidator TargetDecisionTriggerFromFromWar If = "target") = {
	Inherits = CharTrigger
	FromTarget = Char
	FromFromTarget = War
}

# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-97#post-19886919
(Type FromPotentialDecisionTrigger) = {
	(ContextValidator IfNot="target") = CharTrigger
	(ContextValidator If="target") = TargetDecisionTriggerFromFromNone
}




(ContextValidator NormalDecisionTriggerFromFromNone If = "normal") = {
	Inherits = CharTrigger
	
	
}


(ContextValidator NormalDecisionCommandFromFromNone If = "normal") = {
	Inherits = CharCommand
	
	
}


(ContextValidator DeJureDecisionTriggerFromFromNone If = "dejure") = {
	Inherits = TitleTrigger
	
	
}


(ContextValidator DeJureDecisionCommandFromFromNone If = "dejure") = {
	Inherits = TitleCommand
	
	
}


(ContextValidator TargetDecisionTriggerFromFromNone If = "target;v;offmap") = {
	Inherits = CharTrigger
	FromTarget = Char
	
}


(ContextValidator TargetDecisionCommandFromFromNone If = "target;v;offmap") = {
	Inherits = CharCommand
	FromTarget = Char
	
}


(ContextValidator TitleDecisionTriggerFromFromNone If = "succ;title;tp") = {
	Inherits = TitleTrigger
	FromTarget = Char
	
}


(ContextValidator TitleDecisionCommandFromFromNone If = "succ;title;tp") = {
	Inherits = TitleCommand
	FromTarget = Char
	
}


(ContextValidator FortDecisionTriggerFromFromNone If = "fort;settle;hospital") = {
	Inherits = TitleTrigger
	FromTarget = Char
	
}


(ContextValidator FortDecisionCommandFromFromNone If = "fort;settle;hospital") = {
	Inherits = TitleCommand
	FromTarget = Char
	
}


(ContextValidator SocietyDecisionTriggerFromFromNone If = "society") = {
	Inherits = CharTrigger
	
	
}


(ContextValidator SocietyDecisionCommandFromFromNone If = "society") = {
	Inherits = CharCommand
	
	
}





(ContextValidator NormalDecisionTriggerFromFromChar If = "normal") = {
	Inherits = CharTrigger
	
	FromFromTarget = Char
}


(ContextValidator NormalDecisionCommandFromFromChar If = "normal") = {
	Inherits = CharCommand
	
	FromFromTarget = Char
}


(ContextValidator DeJureDecisionTriggerFromFromChar If = "dejure") = {
	Inherits = TitleTrigger
	
	FromFromTarget = Char
}


(ContextValidator DeJureDecisionCommandFromFromChar If = "dejure") = {
	Inherits = TitleCommand
	
	FromFromTarget = Char
}


(ContextValidator TargetDecisionTriggerFromFromChar If = "target;v;offmap") = {
	Inherits = CharTrigger
	FromTarget = Char
	FromFromTarget = Char
}


(ContextValidator TargetDecisionCommandFromFromChar If = "target;v;offmap") = {
	Inherits = CharCommand
	FromTarget = Char
	FromFromTarget = Char
}


(ContextValidator TitleDecisionTriggerFromFromChar If = "succ;title;tp") = {
	Inherits = TitleTrigger
	FromTarget = Char
	FromFromTarget = Char
}


(ContextValidator TitleDecisionCommandFromFromChar If = "succ;title;tp") = {
	Inherits = TitleCommand
	FromTarget = Char
	FromFromTarget = Char
}


(ContextValidator FortDecisionTriggerFromFromChar If = "fort;settle;hospital") = {
	Inherits = TitleTrigger
	FromTarget = Char
	FromFromTarget = Char
}


(ContextValidator FortDecisionCommandFromFromChar If = "fort;settle;hospital") = {
	Inherits = TitleCommand
	FromTarget = Char
	FromFromTarget = Char
}


(ContextValidator SocietyDecisionTriggerFromFromChar If = "society") = {
	Inherits = CharTrigger
	
	FromFromTarget = Char
}


(ContextValidator SocietyDecisionCommandFromFromChar If = "society") = {
	Inherits = CharCommand
	
	FromFromTarget = Char
}





(ContextValidator NormalDecisionTriggerFromFromArtifact If = "normal") = {
	Inherits = CharTrigger
	
	FromFromTarget = Artifact
}


(ContextValidator NormalDecisionCommandFromFromArtifact If = "normal") = {
	Inherits = CharCommand
	
	FromFromTarget = Artifact
}


(ContextValidator DeJureDecisionTriggerFromFromArtifact If = "dejure") = {
	Inherits = TitleTrigger
	
	FromFromTarget = Artifact
}


(ContextValidator DeJureDecisionCommandFromFromArtifact If = "dejure") = {
	Inherits = TitleCommand
	
	FromFromTarget = Artifact
}


(ContextValidator TargetDecisionTriggerFromFromArtifact If = "target;v;offmap") = {
	Inherits = CharTrigger
	FromTarget = Char
	FromFromTarget = Artifact
}


(ContextValidator TargetDecisionCommandFromFromArtifact If = "target;v;offmap") = {
	Inherits = CharCommand
	FromTarget = Char
	FromFromTarget = Artifact
}


(ContextValidator TitleDecisionTriggerFromFromArtifact If = "succ;title;tp") = {
	Inherits = TitleTrigger
	FromTarget = Char
	FromFromTarget = Artifact
}


(ContextValidator TitleDecisionCommandFromFromArtifact If = "succ;title;tp") = {
	Inherits = TitleCommand
	FromTarget = Char
	FromFromTarget = Artifact
}


(ContextValidator FortDecisionTriggerFromFromArtifact If = "fort;settle;hospital") = {
	Inherits = TitleTrigger
	FromTarget = Char
	FromFromTarget = Artifact
}


(ContextValidator FortDecisionCommandFromFromArtifact If = "fort;settle;hospital") = {
	Inherits = TitleCommand
	FromTarget = Char
	FromFromTarget = Artifact
}


(ContextValidator SocietyDecisionTriggerFromFromArtifact If = "society") = {
	Inherits = CharTrigger
	
	FromFromTarget = Artifact
}


(ContextValidator SocietyDecisionCommandFromFromArtifact If = "society") = {
	Inherits = CharCommand
	
	FromFromTarget = Artifact
}





(Type DecisionCommand) = {
	(ContextValidator If = "normal") = NormalDecisionCommandFromFromNone
	(ContextValidator If = dejure) = DeJureDecisionCommandFromFromNone
	(NodeSwitcher If = "target") = {
		Node = "^\filter"
		MarkChecked = False
		Default = { ContextValidator = TargetDecisionCommandFromFromNone }
		Switch = {
			"vassal_wars" = { ContextValidator = TargetDecisionCommandFromFromWar }
		}
	}
	(ContextValidator If = "v;offmap") = TargetDecisionCommandFromFromNone
	(ContextValidator If = "succ;title;tp") = TitleDecisionCommandFromFromNone
	(ContextValidator If = "fort;settle;hospital") = FortDecisionCommandFromFromNone
	(ContextValidator If = "society") = SocietyDecisionCommandFromFromNone
}

(ContextValidator TargetDecisionCommandFromFromWar If = "target") = {
	Inherits = CharCommand
	FromTarget = Char
	FromFromTarget = War
}







