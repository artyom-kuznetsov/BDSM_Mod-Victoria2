(AddFlag MapCommon.ContinentFile)

Includes = { "..\_Common\MapCommon" }

(Validator Maps) = {
	FriendlyName = "Map"
	Type = GroupValidator
	
	Validator = {
		Type = Default
		(FileGroup Ref = RegionPath)
		ValidatorName = RegionFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "map\positions.txt")
		ValidatorName = PositionsFile
	}
	
	Validator = {
		Type = Default
		(DataSource Csv) = {
			(FileGroup Ref = AdjacencyPath)
			Columns = 5
			AllowExtraColumns = False
		}
		ValidatorName = AdjacencyFile
	}
	
	Validator = {
		Type = Default
		(FileGroup Ref = ContinentPath)
		ValidatorName = ContinentFile
	}


}

(Type RegionFile) = {
	(Ch Y N) = { Left = { Type = String } Right = { (PdoList Y) = { Type = { Type = Province (Literal If = Hoi3Ftm) = "peace" (Literal If = Hoi3Ftm) = "ai_prio" } } } }
	(Catch TypeMismatchError ExpectedType = Province) = {
		ReplaceMessage = "$NodeText$ is not a valid province. Provinces in a region file must be either land or ocean provinces."
	}
}

(Type PositionsFile) = {
	OptionList = { Left = { Type = LandProvince } Right = LandProvincePosition }
	OptionList = { Left = { Type = SeaProvince } Right = SeaProvincePosition }
}

(Type Point) = {
	Single = { Left = "x" Right = Double }
	Single = { Left = "y" Right = Double }
}

(Type PositionBase) = {
	Optional = { Left = "text_position" Right = Point }
	Optional = { Left = "text_rotation" Right = Double }
	Optional = { Left = "text_scale" Right = Double }
	
	Optional = { Left = "unit" Right = Point }
	
}

(Type LandProvincePosition) = {
	Inherits = PositionBase
	Optional = { Left = "city" Right = Point }

	Optional = { Left = "building_position" Right = {
		OptionList = { Left = { Type = Building } Right = Point }
	} }
	
	Optional = { Left = "building_nudge" Right = {
	} }
	
}

(Type SeaProvincePosition) = {
	Inherits = PositionBase
	Optional = { Left = "building_nudge" Right = { } }
}

(Type AdjacencyFile) = {
	NodeSwitcher = {
		Node = "0"
		Default = RealAdjRow
		MarkChecked = False
		
		Switch = {
			(LandProvince Enum) = RealAdjRow
			(SeaProvince Enum) = SeaRow
			"-1" = FakeAdjRow
		}
	}
}
(Type.Enum AdjacencyType) = { Values = { "sea" ("canal" If = Hoi3Ftm) } }

(Type RealAdjRow) = {
	NodeSwitcher = {
		Node = "2"
		MarkChecked = True
		
		Switch = {
			"sea" = BasicSea
			"canal" = BasicSea
			"river" = BasicRiver
		}
	}

}

(Type BasicSea) = {
	Single = { Left = "0" Right = LandProvince }
	Single = { Left = "1" Right = LandProvince }
	Single = { Left = "3" Right = SeaProvince }
	Single = { Left = "4" Right = String }

}

(Type BasicRiver) = {
	Single = { Left = "0" Right = LandProvince }
	Single = { Left = "1" Right = LandProvince }
	Single = { Left = "3" Right = Empty }
	Single = { Left = "4" Right = String }

}

(Type SeaRow) = {
	Single = { Left = "0" Right = SeaProvince }
	Single = { Left = "1" Right = SeaProvince }
	Single = { Left = "2" Right = { Literal = "sea" } }
	Single = { Left = "3" Right = LandProvince }
	Single = { Left = "4" Right = String }
}

(Type FakeAdjRow) = {
	Single = { Left = "0" Right = String }
	Single = { Left = "1" Right = String }
	Single = { Left = "2" Right = String }
	Single = { Left = "3" Right = String }
	Single = { Left = "4" Right = String }
}


















