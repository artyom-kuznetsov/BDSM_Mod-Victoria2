(Validator Country) = {
	Type = GroupValidator
	FriendlyName = "Countries"
	
	Validator = {
		Type = Default
		(FileGroup "common\country_colors" "*.txt")
		ValidatorName = CountryColorFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\country_tags" "*.txt")
		ValidatorName = CountryTagFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\countries" "*.txt")
		ValidatorName = CountryFile
	}
	
	(Validator IfNot = DisableFlagFileCheck) = {
		Type = ResourceUseValidator
		Description = "Flags"
		SupplyUnique = True
		
		Supply = {
			(DataSource Chained) = {
				(FileGroup "gfx\flags" "*.tga")
				(StringOp ToUpper)
				(StringOp Replace "\\" "\")
				(StringOp Replace ".TGA" "")
				(StringOp Replace "GFX\FLAGS\" "")
			}
			
			MustBeMatched = True
		}
		
		Demand = {
			(DataSource Enum) = { Key = Tag }
			MustBeMatched = True
		}
		Demand = {
			(DataSource Chained) = {
				(Enum) = { Key = RebelType }
				(StringOp ToUpper)
			}
			MustBeMatched = True
		}
	
	}
}

(Type CountryColorFile) = {
	OptionList = { Left = { Type = Tag } Right = CountryColorDef }
}

(Type CountryColorDef) = {
	Single = { Left = "color1" Right = AnyColor }
	Single = { Left = "color2" Right = AnyColor }
	Single = { Left = "color3" Right = AnyColor }
	
}

(Type CountryTagFile) = {
	Child = { Left = { Type = String } Right = String UniqueId = Left FileExists = { Target = "[R]" Path = "common\*" } (CheckKey "*" Left IfNot = NoCheckKey) (CheckKey "*_ADJ" Left IfNot = NoCheckKey) }
}

(Type CountryFile) = {
	Single = { Left = "graphical_culture" Right = GraphicalCultureType }
	Optional = { Left = "colonial_parent" Right = Tag }
	Optional = { Left = "special_unit_culture" Right = String }
	Single = { Left = "color" Right = AnyColor }
	Optional = { Left = "revolutionary_colors" Right = AnyColor }
	Optional = { Left = "historical_idea_groups" Right = { (PdoList Y) = { Type = IdeaGroup } } }
	Optional = { Left = "historical_units" Right = { (PdoList Y) = { Type = SpecificUnit } } }
	Single = { Left = "monarch_names" Right = MonarchNames }
	Optional = { Left = "leader_names" Right = LeaderNames }
	Optional = { Left = "ship_names" Right = ShipNames }
	Optional = { Left = "army_names" Right = ArmyNames }
	Optional = { Left = "fleet_names" Right = FleetNames }
	Optional = { Left = "historical_score" Right = Double }
	Optional = { Left = "preferred_religion" Right = Religion }
	Optional = { Left = "is_colonial" Right = Bool }
	Optional = { Left = "right_to_bear_arms" Right = Bool }
	Optional = { Left = "random_nation_chance" Right = Int }
	Optional = { Left = "random_nation_extra_size" Right = Int }
	(Optional If = Add1) = { Left = "parent" Right = Tag }

}

(Type MonarchNames) = {
	(Ch Y N IfNot = Countries.AllowDuplicateMonarchNames) = { Left = { Type = String } Right = Int }
	(Ch N N If = Countries.AllowDuplicateMonarchNames) = { Left = { Type = String } Right = Int }
}
(Type LeaderNames) = {
	(PdoList N IfNot = Countries.BanDuplicateLeaderNames) = { Type = String }
	(PdoList Y If = Countries.BanDuplicateLeaderNames) = { Type = String }
}
(Type ShipNames) = {
	(PdoList Y IfNot = Countries.AllowDuplicateShipNames) = { Type = String }
	(PdoList N If = Countries.AllowDuplicateShipNames) = { Type = String }
}
(Type ArmyNames) = {
	(PdoList Y IfNot = Countries.AllowDuplicateArmyNames) = { Type = String }
	(PdoList N If = Countries.AllowDuplicateArmyNames) = { Type = String }
}
(Type FleetNames) = {
	(PdoList Y IfNot = Countries.AllowDuplicateFleetNames) = { Type = String }
	(PdoList N If = Countries.AllowDuplicateFleetNames) = { Type = String }
}














