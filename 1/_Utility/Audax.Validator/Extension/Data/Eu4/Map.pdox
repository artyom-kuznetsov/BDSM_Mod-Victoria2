#(AddFlag MapCommon.ContinentFile)
#(AddFlag Map.NoAllInContinentFileCheck)

(Type.Enum AdjacencyType) = { Values = { "sea" } }

Includes = { "..\_Common\MapCommon" }

Script = {
	(DataSource Pdo) = {
		Path = "map\default.map"
	}
	
	(MakeFileGroup ProvinceGroupPath "map\") = "provincegroup\[R]"
	(MakeFileGroup AreaPath "map\") = "area\[R]"
	(MakeFileGroup SuperRegionPath "map\") = "superregion\[R]"
}

(Validator Maps) = {
	FriendlyName = "Map"
	Type = GroupValidator
	
	Validator = {
		Type = Default
		(FileGroup Ref = ProvinceGroupPath)
		ValidatorName = ProvinceGroupFile
	}
	
	Validator = {
		Type = Default
		(DataSource PdoWithEu4AreaHack) = {
			(FileGroup Ref = AreaPath)
		}
		ValidatorName = AreaFile
	}
	
	Validator = {
		Type = Default
		(FileGroup Ref = RegionPath)
		ValidatorName = RegionFile
	}
	
	Validator = {
		Type = Default
		(FileGroup Ref = SuperRegionPath)
		ValidatorName = SuperRegionFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "map\climate.txt")
		ValidatorName = ClimateFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\natives" "*.txt")
		ValidatorName = NativeFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "map\positions.txt")
		ValidatorName = PositionsFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "map\terrain.txt")
		ValidatorName = TerrainFile
	}
	
	Validator = {
		Type = Default
		(DataSource Csv) = {
			(FileGroup Ref = AdjacencyPath)
			Columns = 9
			AllowExtraColumns = True
		}
		ValidatorName = AdjacencyFile
	}
	
	Validator = {
		Type = Default
		(FileGroup Ref = ContinentPath)
		ValidatorName = ContinentFile
	}

}

(Type TerrainFile) = {
	Single = { Left = "categories" Right = CategoryList }
	Single = { Left = "terrain" Right = TerrainList }
	Single = { Left = "tree" Right = TreeList }
}

(Type TerrainList) = {
	(Ch Y N) = { Left = { Type = String } Right = TerrainDef }
}

(Type TreeList) = {
	(Ch Y N) = { Left = { Type = String } Right = TreeDef }
}

(Type TreeDef) = {
	Single = { Left = "terrain" Right = Terrain }
	Single = { Left = "color" Right = { (PdoList Y) = { Type = Int } } }
}

(Type TerrainDef) = {
	Single = { Left = "type" Right = Terrain }
	Single = { Left = "color" Right = { (PdoList Y) = { Type = Int } } }
	Optional = { Left = "local_development_cost" Right = Double }
	Optional = { Left = "nation_designer_cost_multiplier" Right = Double }
}

(Type CategoryList) = {
	(Ch N N) = { Left = { Type = String } Right = TerrainCategoryDef UniqueId = Left }
}

(Type TerrainCategoryDef) = {
	Inherits = ProvinceModifierDef
	
	Optional = { Left = "defence" Right = Double }
	Optional = { Left = "combat_width" Right = Double }
	Optional = { Left = "movement_cost" Right = Double }
	
	Optional = { Left = "is_water" Right = Bool }
	Optional = { Left = "inland_sea" Right = Bool }
	Optional = { Left = "color" Right = AnyColor }
	Optional = { Left = "type" Right = String }
	Optional = { Left = "sound_type" Right = String }
	Optional = { Left = "nation_designer_cost_multiplier" Right = Double }
	Optional = { Left = "terrain_override" Right = {
		(PdoList Y) = { Type = Province }
	} }
}

(Type AdjacencyFile) = {
	NodeSwitcher = {
		Node = "2"
		
		Switch = {
			"lake" = RealAdjRow
			"sea" = RealAdjRow
			"normal" = NormalRow
			"canal" = CanalRow
			"land" = LandStraitRow # http://forum.paradoxplaza.com/forum/showthread.php?720987-The-Validator-Find-errors-quickly-and-with-minimal-pain!&p=18257633&viewfull=1#post18257633
			"river" = RealAdjRow
			"" = FakeAdjRow
			"-1" = FakeAdjRow
		}
	}
}

(Type RealAdjRow) = {
	Single = { Left = "0" Right = LandNonRnwProvince }
	Single = { Left = "1" Right = LandNonRnwProvince }
	Single = { Left = "3" Right = { SeaNonRnwProvince LakeNonRnwProvince (LandNonRnwProvince If = "Map.AllowUnusualThings") } }
	Single = { Left = "4" Right = Int }
	Single = { Left = "5" Right = Int }
	Single = { Left = "6" Right = Int }
	Single = { Left = "7" Right = Int }
	Single = { Left = "8" Right = String }
}

(Type CanalRow) = {
	Single = { Left = "0" Right = SeaNonRnwProvince }
	Single = { Left = "1" Right = SeaNonRnwProvince }
	Single = { Left = "3" Right = LandNonRnwProvince }
	Single = { Left = "4" Right = Int }
	Single = { Left = "5" Right = Int }
	Single = { Left = "6" Right = Int }
	Single = { Left = "7" Right = Int }
	Single = { Left = "8" Right = String }
}

(Type LandStraitRow) = {
	Single = { Left = "0" Right = LandNonRnwProvince }
	Single = { Left = "1" Right = LandNonRnwProvince }
	Single = { Left = "3" Right = LandNonRnwProvince }
	Single = { Left = "4" Right = Int }
	Single = { Left = "5" Right = Int }
	Single = { Left = "6" Right = Int }
	Single = { Left = "7" Right = Int }
	Single = { Left = "8" Right = String }
}

(Type NormalRow) = {
	Single = { Left = "0" Right = LandNonRnwProvince }
	Single = { Left = "1" Right = LandNonRnwProvince }
	Single = { Left = "3" Right = 0 }
	Single = { Left = "4" Right = Int }
	Single = { Left = "5" Right = Int }
	Single = { Left = "6" Right = Int }
	Single = { Left = "7" Right = Int }
	Single = { Left = "8" Right = String }
}

(Type FakeAdjRow) = {
	Single = { Left = "0" Right = String }
	Single = { Left = "1" Right = String }
	Single = { Left = "3" Right = String }
	Single = { Left = "4" Right = String }
	Single = { Left = "5" Right = String }
	Single = { Left = "6" Right = String }
	Single = { Left = "7" Right = String }
	Single = { Left = "8" Right = String }
}


# Check that wasteland provinces are not included in province group files
Global = {
(Type.Enum WastelandProvince) = {
	Import = {
		(FileGroup "map\climate.txt")
		SelectPath = "impassable\Item\[R]"
	}
}
(Type.Enum OnlyRnwProvince) = {
	Import = {
		(FileGroup "map\default.map")
		SelectPath = "only_used_for_random\Item\[R]"
	}
}

Script = {
	(DataSource Enum) = {
		Key = "LandProvince"
	}
	(MakeEnumValidator LandNonWastelandNonRnwProvince) = "* { ([L]) !< WastelandProvince }\. { ([L]) !< OnlyRnwProvince }\[L]"
	
	(DataSource Enum) = {
		Key = "Province"
	}
	(MakeEnumValidator RegionProvince) = "* { ([L]) !< WastelandProvince }\[L]"
	
	# All land and sea provinces, except wasteland
	(DataSource Enum) = {
		Key = "RegionProvince"
	}
	(MakeEnumValidator AreaProvince) = "* { ([L]) !< LakeProvince }\. { ([L]) !< OnlyRnwProvince }\[L]"
	
	(DataSource Enum) = {
		Key = "Province"
	}
	(MakeEnumValidator NonRnwProvince) = "* { ([L]) !< OnlyRnwProvince }\[L]"
	
	(DataSource Enum) = {
		Key = "LandProvince"
	}
	(MakeEnumValidator LandNonRnwProvince) = "* { ([L]) !< OnlyRnwProvince }\[L]"
	
	(DataSource Enum) = {
		Key = "SeaProvince"
	}
	(MakeEnumValidator SeaNonRnwProvince) = "* { ([L]) !< OnlyRnwProvince }\[L]"
	
	(DataSource Enum) = {
		Key = "LakeProvince"
	}
	(MakeEnumValidator LakeNonRnwProvince) = "* { ([L]) !< OnlyRnwProvince }\[L]"
}
}

(Type ProvinceGroupFile) = {
	(Ch Y N) = {
		Left = { Type = String }
		Right = {
			(PdoList Y) = { Type = NonRnwProvince }
		}
	}
		
	(Catch TypeMismatchError ExpectedType = RegionProvince) = {
		PrependError = "@Map.WastelandInRegionSuppress"
		SuppressCatch
	}
	
	(Catch TypeMismatchError ExpectedType = NonRnwProvince) = {
		ReplaceMessage = "@Map.NotValidProvinceInRegion"
	}

	(Catch TypeMismatchError ExpectedType = RegionProvince) = {
		ReplaceMessage = "@Map.WastelandInRegion"
	}
	
	(Catch TypeMismatchError ExpectedType = NonRnwProvince) = {
		ReplaceMessage = "@Map.NotValidProvinceInRegion"
	}
}

(Type ClimateFile) = {
	(Ch Y N) = { Left = "impassable" Right = WastelandProvinceList }
	
	(Local MonsoonUniqueId Uid) = Right
	(Local ClimateUniqueId Uid) = Right
	(Local WinterUniqueId Uid) = Right
	
	# Climates
	Single = { Left = "arid" Right = ClimateProvinceList }
	Single = { Left = "arctic" Right = ClimateProvinceList }
	Single = { Left = "tropical" Right = ClimateProvinceList }
	
	# Winters
	Single = { Left = "mild_winter" Right = WinterProvinceList }
	Single = { Left = "normal_winter" Right = WinterProvinceList }
	Single = { Left = "severe_winter" Right = WinterProvinceList }
	
	Single = { Left = "mild_monsoon" Right = MonsoonProvinceList }
	Single = { Left = "normal_monsoon" Right = MonsoonProvinceList }
	Single = { Left = "severe_monsoon" Right = MonsoonProvinceList }
	
	Single = { Left = "equator_y_on_province_image" Right = NnInt }
	
	(If If = Map.StrictClimate) = {
		#AllOf = { Target = "*\*\[R]" Source = LandNonRnwProvince }
	}
	
	(Catch PureNodeStructureError) = {
		ReplaceMessage = "The province $Missing$ does not appear. All land provinces must be included somewhere within the climate file."
	}
	#(Catch DuplicateIdError) = {
	#	ReplaceMessage = "[map\climate.txt]: The province $Id$ appears twice within the climate file, at sections '$Parent1$' and '$Parent2$'. Each land province may be listed only once."
	#}
}

(Type MonsoonProvinceList) = {
	(PdoList N) = {
		Type = LandNonRnwProvince
		(LocalOp Validate MonsoonUniqueId)
	}
}

(Type ClimateProvinceList) = {
	(PdoList N) = {
		Type = LandNonRnwProvince
		(LocalOp Validate ClimateUniqueId)
	}
}

(Type WinterProvinceList) = {
	(PdoList N) = {
		Type = LandNonRnwProvince
		(LocalOp Validate WinterUniqueId)
	}
}

(Type WastelandProvinceList) = {
	(PdoList Y) = {
		(Type IfNot = Map.AllowSeaInWasteland) = LandProvince
		(Type If = Map.AllowSeaInWasteland) = Province
		#(LocalOp Validate ClimateId IfNot = Map.AllowDupForWasteland)
	}
	
	(Catch TypeMismatchError ExpectedType = LandNonRnwProvince) = {
		PrependError = "Normally, wasteland provinces should all be land provinces. However, if you are attempting to make some sea provinces impassable, it is permissible to have sea provinces listed. In order to disable this warning, and any that follow, open the file SettingsFiles\Eu4.txt and follow the instructions."
		SuppressCatch
	}
}

(Type NativeFile) = {
	(Ch Y N) = { Left = { Type = String } Right = NativeDefinition }
	(If IfNot = Map.NoStrictNatives) = {
		#AllOf = { Target = "*\provinces\*\[R]" Source = LandNonWastelandNonRnwProvince }
	}
	
	(Catch TypeMismatchError ExpectedType = LandNonWastelandNonRnwProvince) = {
		PrependError = "Normally, wasteland provinces should not be in natives.txt, as it can cause problems. However, if you know what you are doing, you may disable this warning. In order to disable this warning, and any that follow, open the file SettingsFiles\Eu4.txt and follow the instructions."
		SuppressCatch
	}

	(Catch PureNodeStructureError) = {
		ReplaceMessage = "The province $Missing$ does not appear. All non-wasteland land provinces must be included somewhere within the natives file."
	}
	(Catch DuplicateIdError) = {
		ReplaceMessage = "[common\natives.txt]: The province $Id$ appears twice in the natives file, at sections '$Parent1.$' and '$Parent2.$'. Each non-wasteland land province may be listed only once."
	}
}

(Type NativeDefinition) = {
	Single = { Left = "graphical_culture" Right = GraphicalCultureType }
	Single = { Left = "icon" Right = Int }
	Single = { Left = "color" Right = AnyColor }
	Single = { Left = "unit" Right = SpecificUnit }
	Single = { Left = "provinces" Right = NativeProvinceList }
}

(Type NativeProvinceList) = {
	#(PdoList N IfNot = Map.AllowWastelandInNatives) = { Type = LandNonWastelandNonRnwProvince } #UniqueId = Right }
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.720987/page-77#post-23302436
	(PdoList N) = { Type = LandProvince UniqueId = Right }
}

(Type PositionsFile) = {
	OptionList = { Left = { Type = LandProvince } Right = LandProvincePosition }
	OptionList = { Left = { Type = LakeProvince } Right = LandProvincePosition }
	OptionList = { Left = { Type = SeaProvince } Right = SeaProvincePosition }
}

(Type Point) = {
	Single = { Left = "x" Right = Double }
	Single = { Left = "y" Right = Double }
}

(Type PositionBase) = {
	Optional = { Left = "height" Right = { (PdoList N) = { Type = Double } } }
	Optional = { Left = "rotation" Right = { (PdoList N) = { Type = Double } } }
	Optional = { Left = "position" Right = { (PdoList N) = { Type = Double } } }
	
	Optional = { Left = "text_position" Right = Point }
	Optional = { Left = "text_rotation" Right = Double }
	Optional = { Left = "text_scale" Right = Double }
	
	Optional = { Left = "unit" Right = Point }
}

(Type LandProvincePosition) = {
	Inherits = PositionBase
	
	Optional = { Left = "city" Right = Point }
	Optional = { Left = "city_nudge" Right = Double }
	Optional = { Left = "city_rotation" Right = Double }
	
	Optional = { Left = "unit" Right = Point }
	
	Optional = { Left = "port" Right = Point }
	Optional = { Left = "port_rotation" Right = Double }
	
	Optional = { Left = "manufactory" Right = Point }
	Optional = { Left = "manufactory_nudge" Right = Double }
	Optional = { Left = "manufactory_rotation" Right = Double }
	
	Optional = { Left = "trade" Right = Point }
	Optional = { Left = "trade_nudge" Right = Double }
	
	
}

(Type SeaProvincePosition) = {
	Inherits = PositionBase

	Optional = { Left = "trade_wind_direction" Right = Double }
}

(Type AreaFile) = {
	AllOf = { Target = "*\*\[R]" Source = AreaProvince }
	(Ch Y N) = {
		Left = { Type = String }
		Right = {
			Optional = { Left = "color" Right = AnyColor }
			(PdoList N) = { Type = AreaProvince UniqueId = Right }
		}
		(CheckKey "*" Left IfNot = NoCheckKey)
	}
}

(Type RnwCountryTrigger) = { ContextValidator = RnwCountryTrigger }
(ContextValidator RnwCountryTrigger) = {
	Inherits = CountryTrigger
	FromTarget = Province
}

(Type RegionFile) = {
	AllOf = { Target = "*\areas\*\[R]" Source = Area }
	Single = { Left = "random_new_world_region" Right = {
		(Ch N Y) = { Left = "discover_if" Right = RnwCountryTrigger }
	} }
	(Ch Y N) = {
		Left = { Type = String }
		Right = {
			(Ch N Y) = { Left = "discover_if" Right = CountryTrigger }
			Single = { Left = "areas" Right = {
				(PdoList N) = { Type = Area UniqueId = Right }
			} }
			(Ch N Y) = { Left = "monsoon" Right = { (PdoList N 2 2) = { Type = DateInYear } } }
		}
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "*_name" Left IfNot = NoCheckKey)
		(CheckKey "*_adj" Left IfNot = NoCheckKey)
	}
}

(Type SuperRegionFile) = {
	# Actually not all regions need to be in a super-region
	#AllOf = { Target = "*\*\[R]" Source = Region }
	(Ch Y N) = {
		Left = { Type = String }
		Right = {
			(PdoList N) = { Type = Region UniqueId = Right }
		}
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "*_name" Left IfNot = NoCheckKey)
		(CheckKey "*_adj" Left IfNot = NoCheckKey)
	}
}
(Type ContinentFile) = {
	Optional = { Left = "island_check_provinces" Right = { (PdoList Y) = { Type = NonRnwProvince } } }
	(Ch Y N) = { Left = { Type = String } Right = ContinentProvinceList }
	(AllOf IfNot = Map.NoAllInContinentFileCheck) = { Target = "* { ([L]) != island_check_provinces }\*\[R]" Source = LandNonRnwProvince }
	(Catch PureNodeStructureError) = {
		ReplaceMessage = "The province $Missing$ does not appear. All land provinces must be included somewhere within the continent file."
	}
	(Catch DuplicateIdError) = {
		ReplaceMessage = "[map\continent.txt]: The province $Id$ appears twice within the continent file, at sections '$Parent1$' and '$Parent2$'. Each land province may be listed only once."
	}
}

(Type ContinentProvinceList) = {
	(PdoList N) = { Type = NonRnwProvince UniqueId = Right }
}







































