


(ContextValidator Trigger) = { Members = {
	(Y  ) = { Left = "is_year" Right = Int }
	(Y  ) = { Left = "is_month" Right = Int }
	(N Y) = { Left = "exists"					Right = Tag }
	(Y  ) = { Left = "revolution_target_exists"	Right = Bool }
	(N Y) = { Left = "has_global_flag" Right = { Right = String (LocalOp "chk" "[R]" AddChecker GlobalFlag) } }
	
	(N N) = { Left = "check_variable" Right = CheckVar }
	(N Y) = { Left = "is_variable_equal" Right = CheckVar }
	(N Y) = { Left = "had_global_flag" Right = HadGlobalFlag }
	
	(Y  ) = { Left = "count" Right = PInt }
} }


(ContextValidator CountryTrigger) = { Members = {
	(N N) = { Left = "variable_arithmetic_trigger" Right = CountryArithmeticTrigger }
} }

(Type CountryArithmeticTrigger) = {
	Inherits = CountryTrigger
	(Ch N Y) = { Left = "export_to_variable" Right = ExportToVarDef }
	(Ch N N) = { Left = "change_variable" Right = ChangeVar }
	(Ch N N) = { Left = "multiply_variable" Right = ChangeVar }
	(Ch N N) = { Left = "subtract_variable" Right = ChangeVar }
	(Ch N N) = { Left = "divide_variable" Right = ChangeVar }
	(Ch N Y) = { Left = "custom_tooltip" Right = Key }
}

(ContextValidator ProvinceTrigger) = { Members = {
	(N N) = { Left = "variable_arithmetic_trigger" Right = ProvinceArithmeticTrigger }
} }

(Type ProvinceArithmeticTrigger) = {
	Inherits = ProvinceTrigger
	(Ch N Y) = { Left = "export_to_variable" Right = ExportToVarDef }
	(Ch N N) = { Left = "change_variable" Right = ChangeVar }
	(Ch N N) = { Left = "multiply_variable" Right = ChangeVar }
	(Ch N N) = { Left = "subtract_variable" Right = ChangeVar }
	(Ch N N) = { Left = "divide_variable" Right = ChangeVar }
	(Ch N Y) = { Left = "custom_tooltip" Right = Key }
}


(ContextValidator ProvinceTrigger) = { Members = {
	(N Y) = { Left = "has_province_flag" Right = { Right = String (LocalOp "chk" "[R]" AddChecker ProvinceFlag) } }
	(N Y) = { Left = "has_country_flag" Right = { Right = String (LocalOp "chk" "[R]" AddChecker CountryFlag) } }

	(N Y) = { Left = "has_trade_modifier" Right = RemoveTradeModifier } # UNTESTED
	(N Y) = { Left = "has_province_modifier" Right = { EventModifier StaticModifier TriggeredModifier } }
	(N Y) = { Left = "had_province_flag" Right = HadProvinceFlag } # UNTESTED
	# has_country_modifier DOES NOT work in this scope at this time
	
	(N Y) = { Left = "has_local_modifier_value" Right = {
		Single = { Left = "which" Right = { ProvinceModifierDoubleKey } }
		Single = { Left = "value" Right = Double }
	} }
} }

(ContextValidator CountryTrigger) = { Members = {
	(N Y If = Debug) = { Left = "has_province_modifier" Right = EventModifier } # BROKEN it seems
	(N Y) = { Left = "has_country_flag" Right = { Right = String (LocalOp "chk" "[R]" AddChecker CountryFlag) } }
	(N Y) = { Left = "has_country_modifier" Right = { EventModifier StaticModifier TriggeredModifier } }
	(N Y) = { Left = "had_country_flag" Right = HadCountryFlag } # UNTESTED: Positive form
	(N Y) = { Left = "had_ruler_flag" Right = HadRulerFlag } # UNTESTED: Positive form
	(N Y) = { Left = "had_heir_flag" Right = HadHeirFlag } # UNTESTED: Positive form
	(N Y) = { Left = "had_consort_flag" Right = HadConsortFlag } # UNTESTED: Positive form
	
	(N Y) = { Left = "has_ruler_modifier" Right = { EventModifier StaticModifier TriggeredModifier } } # UNTESTED: Positive form
	(N Y) = { Left = "has_ruler_flag" Right = { Right = String (LocalOp "chk" "[R]" AddChecker RulerFlag) } }
	(N Y) = { Left = "has_heir_flag" Right = { Right = String (LocalOp "chk" "[R]" AddChecker HeirFlag) } }
	(N Y) = { Left = "has_consort_flag" Right = { Right = String (LocalOp "chk" "[R]" AddChecker ConsortFlag) } }
	
	(N Y) = { Left = "has_global_modifier_value" Right = {
		Single = { Left = "which" Right = { CountryModifierDoubleKey FactionInfluenceEnum } }
		Single = { Left = "value" Right = Double }
		Optional = { Left = "extra_shortcut" Right = Bool }
	} }
} }

Global = {
(Type ExportToVarDef) = {
	(LocalOp "cng" "which\[R]" 0 AddSetter Variable If = TraceFlags)
	(LocalOp "cng" "variable_name\[R]" 0 AddSetter Variable If = TraceFlags)
	Single = { Left = { "variable_name" "which" } Right = String }
	Optional = { Left = "who" Right = { MaybeEventTargetCountryProvince Owner } }
	Optional = { Left = "with" Right = { MaybeEventTargetCountryProvince Owner } }
	Single = { Left = "value" Right = String }
	CheckExportToVariableValue
}
}

(ContextValidator Command) = { Members = {
	(N N) = { Left = "set_variable" Right = SetVar }
	(N N) = { Left = "change_variable" Right = ChangeVar }
	(N N) = { Left = "multiply_variable" Right = ChangeVar }
	(N N) = { Left = "subtract_variable" Right = ChangeVar }
	(N N) = { Left = "divide_variable" Right = ChangeVar }
	# Can be set/cleared multiple times in same block if there are if statements or limits etc controlling things
	(N N) = { Left = "set_global_flag" Right = { Right = String (LocalOp "set" "[R]" AddSetter GlobalFlag) } }
	(N N) = { Left = "clr_global_flag" Right = { Right = String (LocalOp "clr" "[R]" AddSetter GlobalFlag) } }
		
	(N Y) = { Left = "add_country_modifier" Right = AddModifier }
	(N Y) = { Left = "extend_country_modifier" Right = ExtendModifier }
	(N Y) = { Left = "remove_country_modifier" Right = EModifier }
	(N Y) = { Left = "add_ruler_modifier" Right = AddModifier }
	(N Y) = { Left = "remove_ruler_modifier" Right = EModifier }
	
	(N Y) = { Left = "export_to_variable" Right = ExportToVarDef }
	
} }

(Type ExtendModifier) = {
	Single = { Left = "name" Right = EModifier }
	Single = { Left = "duration" Right = Int }
	Optional = { Left = "desc" Right = Key }
	Optional = { Left = "hidden" Right = Bool }
}

(ContextValidator ProvinceCommand) = { Members = {
	(N Y) = { Left = "add_province_modifier" Right = AddModifier }
	(N Y) = { Left = "extend_province_modifier" Right = ExtendModifier }
	(N Y) = { Left = "add_permanent_province_modifier" Right = AddModifier } # UNTESTED
	(N Y) = { Left = "remove_province_modifier" Right = EModifier }
	# Can be set/cleared multiple times in same block if there are if statements or limits etc controlling things
	(N N) = { Left = "set_province_flag" Right = { Right = String (LocalOp "set" "[R]" AddSetter ProvinceFlag) } }
	(N N) = { Left = "clr_province_flag" Right = { Right = String (LocalOp "clr" "[R]" AddSetter ProvinceFlag) } }
	
	# Can be set/cleared multiple times in same block if there are if statements or limits etc controlling things
	(N N) = { Left = "set_country_flag" Right = { Right = String (LocalOp "set" "[R]" AddSetter CountryFlag) } }
	(N N) = { Left = "clr_country_flag" Right = { Right = String (LocalOp "clr" "[R]" AddSetter CountryFlag) } }
	
	(N Y) = { Left = "add_trade_modifier" Right = AddTradeModifier } # UNTESTED
	(N Y) = { Left = "remove_trade_modifier" Right = RemoveTradeModifier } # UNTESTED
} }

(ContextValidator CountryCommand) = { Members = {
	
	(N Y If = Debug) = { Left = "add_province_modifier" Right = AddModifier } # BROKEN it seems
	
	# Can be set/cleared multiple times in same block if there are if statements or limits etc controlling things
	(N N) = { Left = "set_country_flag" Right = { Right = String (LocalOp "set" "[R]" AddSetter CountryFlag) } }
	(N N) = { Left = "clr_country_flag" Right = { Right = String (LocalOp "clr" "[R]" AddSetter CountryFlag) } }
	(N N) = { Left = "set_ruler_flag" Right = { Right = String (LocalOp "set" "[R]" AddSetter RulerFlag) } }
	(N N) = { Left = "clr_ruler_flag" Right = { Right = String (LocalOp "clr" "[R]" AddSetter RulerFlag) } }
	(N N) = { Left = "set_heir_flag" Right = { Right = String (LocalOp "set" "[R]" AddSetter HeirFlag) } }
	(N N) = { Left = "clr_heir_flag" Right = { Right = String (LocalOp "clr" "[R]" AddSetter HeirFlag) } }
	(N N) = { Left = "set_consort_flag" Right = { Right = String (LocalOp "set" "[R]" AddSetter ConsortFlag) } }
	(N N) = { Left = "clr_consort_flag" Right = { Right = String (LocalOp "clr" "[R]" AddSetter ConsortFlag) } }
	
	(N Y) = { Left = "remove_province_modifier" Right = EModifier }
	
	(N Y) = { Left = "set_province_flag" Right = { Right = String (LocalOp "set" "[R]" AddSetter ProvinceFlag) } } # UNTESTED
} }

(Type HadFlag) = {
	Single = { Left = "flag" Right = String }
	Single = { Left = "days" Right = Double }
}

(Type HadGlobalFlag) = {
	Inherits = HadFlag
	(LocalOp "had" "flag\[R]" AddChecker GlobalFlag)
}

(Type HadCountryFlag) = {
	Inherits = HadFlag
	(LocalOp "had" "flag\[R]" AddChecker CountryFlag)
}

(Type HadRulerFlag) = {
	Inherits = HadFlag
	(LocalOp "had" "flag\[R]" AddChecker RulerFlag)
}

(Type HadHeirFlag) = {
	Inherits = HadFlag
	(LocalOp "had" "flag\[R]" AddChecker HeirFlag)
}

(Type HadConsortFlag) = {
	Inherits = HadFlag
	(LocalOp "had" "flag\[R]" AddChecker ConsortFlag)
}

(Type HadProvinceFlag) = {
	Inherits = HadFlag
	(LocalOp "had" "flag\[R]" AddChecker ProvinceFlag)
}


(Type AddModifier) = {
	Single = { Left = "name" Right = EModifier }
	Optional = { Left = "duration" Right = Int }
	Optional = { Left = "hidden" Right = Bool }
	Optional = { Left = "desc" Right = Key }
}

Global = {
(Type.Or EModifier) = {
	Type = EventModifier
	Type = StaticModifier
}
}

(Type Var) = {
	Single = { Left = "which" Right = String }
	Single = { Left = "value" Right = Double }
}

(Type CheckVar) = {
	FancilyPickCorrectBecauseParadoxDoesntMakeThingsWithDifferentNames = { TwoWhich = CheckVar0 Else = CheckVar1 }
}

(Type CheckVar0) = {
	(Ch N Y 2 2) = { Left = "which" Right = String }
	(LocalOp "chk" "which\[R]" AddChecker Variable)
}

(Type CheckVar1) = {
	Inherits = Var
	(LocalOp "chk" "which\[R]" AddChecker Variable)
}

(Type SetVar) = {
	FancilyPickCorrectBecauseParadoxDoesntMakeThingsWithDifferentNames = { TwoWhich = SetVar0 Else = SetVar1 }
}

(Type SetVar0) = {
	(Ch N Y 2 2) = { Left = "which" Right = String }
	(LocalOp "set" "which\[R]" 0 AddSetter Variable)
	(LocalOp "set" "which\[R]" 1 AddChecker Variable)
}

(Type SetVar1) = {
	Inherits = Var
	(LocalOp "set" "which\[R]" AddSetter Variable)
}

Global = {
(Type ChangeVar) = {
	FancilyPickCorrectBecauseParadoxDoesntMakeThingsWithDifferentNames = { TwoWhich = ChangeVar0 Else = ChangeVar1 }
}
}

(Type ChangeVar0) = {
	(Ch N N 2 2) = { Left = "which" Right = String }
	(LocalOp "cng" "which\[R]" 0 AddSetter Variable)
	(LocalOp "cng" "which\[R]" 1 AddChecker Variable)
}

(Type ChangeVar1) = {
	Inherits = Var
	(LocalOp "cng" "which\[R]" AddSetter Variable)
}

(Type AddTradeModifier) = {
	Single = { Left = "who" Right = { Tag MaybeEventTargetCountry } }
	Single = { Left = "duration" Right = Int }
	Single = { Left = "power" Right = Int }
	Single = { Left = "key" Right = Key }
}

(Type RemoveTradeModifier) = {
	Single = { Left = "who" Right = { Tag MaybeEventTargetCountry } }
	Single = { Left = { "key" "name" } Right = Key }
}












