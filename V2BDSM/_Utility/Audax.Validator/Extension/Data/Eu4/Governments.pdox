

(Validator Governments) = {
	Type = GroupValidator
	FriendlyName = "Governmental"
	
	Validator = {
		Type = Default
		(FileGroup "common\government_reforms" "*.txt")
		ValidatorName = GovernmentReformFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\estates" "*.txt")
		ValidatorName = EstateFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\decrees" "*.txt")
		ValidatorName = DecreesFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\isolationism" "*.txt")
		ValidatorName = IsolationismFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\state_edicts" "*.txt")
		ValidatorName = StateEdictsFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\imperial_reforms" "*.txt")
		ValidatorName = ImperialReformFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\leader_personalities" "*.txt")
		ValidatorName = LeaderPersonalityFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\ruler_personalities" "*.txt")
		ValidatorName = RulerPersonalityFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\institutions" "*.txt")
		ValidatorName = InstitutionFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\governments" "*.txt")
		ValidatorName = GovernmentFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\factions" "*.txt")
		ValidatorName = FactionFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\ideas" "*.txt")
		ValidatorName = IdeasFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\policies" "*.txt")
		ValidatorName = PolicyFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\native_advancement" "*.txt")
		ValidatorName = NativeIdeasFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\fervor" "*.txt")
		ValidatorName = FervorFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\client_states" "*.txt")
		ValidatorName = ClientStatesFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\custom_ideas" "*.txt")
		ValidatorName = CustomIdeasFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\diplomatic_actions" "*.txt")
		ValidatorName = DiplomaticActionsFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\government_names" "*.txt")
		ValidatorName = GovernmentNamesFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\parliament_bribes" "*.txt")
		ValidatorName = ParliamentBribesFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\parliament_issues" "*.txt")
		ValidatorName = ParliamentIssuesFile
	}
}

(Type GovernmentReformFile) = {
	(Ch N N) = {
		(CheckKey "*" Left IfNot = NoCheckKey)
		Left = { Type = String }
		Right = GovernmentReformDef
	}
}

(Type GovernmentReformSettings) = {
	Optional = { Left = "disallowed_trade_goods" Right = { (PdoList Y) = { Type = TradeGood } } }
	Optional = { Left = "government_abilities" Right = { (PdoList Y) = { Type = String } } }
	Optional = { Left = "claim_states" Right = Bool }
	Optional = { Left = "has_russian_abilities" Right = Bool }
	Optional = { Left = "monarchy" Right = Bool }
	Optional = { Left = "is_trading_city" Right = Bool }
	Optional = { Left = "has_harem" Right = Bool }
	Optional = { Left = "militarised_society" Right = Bool }
	Optional = { Left = "maintain_dynasty" Right = Bool }
	Optional = { Left = "queen" Right = Bool }
	Optional = { Left = "monastic" Right = Bool }
	Optional = { Left = "valid_for_new_country" Right = Bool }
	Optional = { Left = "republican_name" Right = Bool }
	Optional = { Left = "republic" Right = Bool }
	Optional = { Left = "dictatorship" Right = Bool }
	Optional = { Left = "royal_marriage" Right = Bool }
	Optional = { Left = "tribal" Right = Bool }
	Optional = { Left = "allow_convert" Right = Bool }
	Optional = { Left = "allow_vassal_alliance" Right = Bool }
	Optional = { Left = "allow_vassal_war" Right = Bool }
	Optional = { Left = "nomad" Right = Bool }
	Optional = { Left = "religion" Right = Bool }
	Optional = { Left = "papacy" Right = Bool }
	Optional = { Left = "allow_westernize" Right = Bool }
	Optional = { Left = "allow_migration" Right = Bool }
	Optional = { Left = "native_mechanic" Right = Bool }
	Optional = { Left = "boost_income" Right = Bool }
	Optional = { Left = "dutch_mechanics" Right = Bool }
	Optional = { Left = "is_elective" Right = Bool }
	Optional = { Left = "can_use_trade_post" Right = Bool }
	Optional = { Left = "rulers_can_be_generals" Right = Bool }
	Optional = { Left = "can_form_trade_league" Right = Bool }
	Optional = { Left = "heirs_can_be_generals" Right = Bool }
	Optional = { Left = "allow_force_tributary" Right = Bool }
	Optional = { Left = "has_meritocracy" Right = Bool }
	Optional = { Left = "has_pashas" Right = Bool }
	Optional = { Left = "foreign_slave_rulers" Right = Bool }
	Optional = { Left = "heir" Right = Bool }
	Optional = { Left = "allow_banners" Right = Bool }
	
	Optional = { Left = "duration" Right = Int }
	Optional = { Left = "min_autonomy" Right = Int }
	Optional = { Left = "different_religion_acceptance" Right = Int }
	Optional = { Left = "different_religion_group_acceptance" Right = Int }
	
	Optional = { Left = "valid_for_nation_designer" Right = Bool }
	Optional = { Left = "nation_designer_cost" Right = Int }
	Optional = { Left = "nation_designer_trigger" Right = CountryTrigger }
	
	Optional = { Left = "has_parliament" Right = Bool }
	Optional = { Left = "free_city" Right = Bool }
	Optional = { Left = "has_devotion" Right = Bool }
	Optional = { Left = "allow_normal_conversion" Right = Bool }
	Optional = { Left = "legacy_government" Right = Bool }
	Optional = { Left = "lock_level_when_selected" Right = Bool }
	Optional = { Left = "start_territory_to_estates" Right = Double }
	Optional = { Left = "generals_become_rulers" Right = Bool }
	Optional = { Left = "admirals_become_rulers" Right = Bool }
	Optional = { Left = "force_admiral_leader" Right = Bool }
	Optional = { Left = "election_on_death" Right = Bool }
	
	Optional = { Left = "modifiers" Right = CountryModifierDef }
	Optional = { Left = "trade_city_reform" Right = { Type = GovernmentReform Literal = "" } }
	Optional = { Left = "factions" Right = { (PdoList Y) = { Type = Faction } } }
	Optional = { Left = "factions_frame" Right = NnInt }
	
	Optional = { Left = "custom_attributes" Right = { (Ch Y N) = { Left = { Type = String } Right = Bool } } }
	
	Optional = { Left = "states_general_mechanic" Right = {
		Optional = { Left = "statists" Right = CountryModifierDef }
		Optional = { Left = "monarchists" Right = CountryModifierDef }
		Optional = { Left = "orangists" Right = CountryModifierDef }
	} }
	
	Optional = { Left = "assimilation_cultures" Right = {
		(Ch Y N) = { Left = { Type = CultureGroup } Right = CountryModifierDef }
	} }
	
	Optional = { Left = "removed_effect" Right = CountryCommand }
	Optional = { Left = "has_term_election" Right = Bool }
}

(Type GovernmentReformDef) = {
	Inherits = GovernmentReformSettings
	
	Optional = { Left = "potential" Right = CountryTrigger }
	Optional = { Left = "trigger" Right = CountryTrigger }
	Optional = { Left = "effect" Right = CountryCommand }
	
	Optional = { Left = "basic_reform" Right = Bool }
	Optional = { Left = "icon" Right = String }
	Optional = { Left = "ai" Right = AiWillDo }
	Optional = { Left = "fixed_rank" Right = GovernmentRank }
	Optional = { Left = "legacy_equivalent" Right = GovernmentReform }
	
	(Ch N N) = { Left = "conditional" Right = {
		Single = { Left = "allow" Right = GlobalTrigger }
		Inherits = GovernmentReformSettings
	} }
}

(Type StateEdictsFile) = {
	Child = {
		Left = { Type = String }
		Right = StateEdictDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
	}
}

(Type StateEdictDef) = {
	Optional = { Left = "potential" Right = StateTrigger }
	Optional = { Left = "allow" Right = StateTrigger }
	Optional = { Left = "modifier" Right = ProvinceModifierDef }
	Optional = { Left = "color" Right = AnyColor }
	Single = { Left = "ai_will_do" Right = {
		Optional = { Left = "factor" Right = NnDbl }
		(Ch N Y) = { Left = "modifier" Right = {
			Inherits = FactorModifier
			Optional = { Left = "factor" Right = NnDbl }
			
			Inherits = StateTrigger
		} }
	} }
}

(Type IsolationismFile) = {
	Child = {
		Left = { Type = String }
		Right = IsolationDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "*_title" Left IfNot = NoCheckKey)
		(CheckKey "*_desc" Left IfNot = NoCheckKey)
	}
}

(Type IsolationDef) = {
	Single = { Left = "isolation_value" Right = Double }
	Single = { Left = "modifier" Right = CountryModifierDef }
}

(Type DecreesFile) = {
	Child = {
		Left = { Type = String }
		Right = DecreeDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "*_title" Left IfNot = NoCheckKey)
		(CheckKey "*_desc" Left IfNot = NoCheckKey)
	}
}

(Type DecreeDef) = {
	Single = { Left = "ai_will_do" Right = {
		Optional = { Left = "factor" Right = NnDbl }
		(Ch N Y) = { Left = "modifier" Right = {
			Inherits = FactorModifier
			Optional = { Left = "factor" Right = NnDbl }
			
			Inherits = CountryTrigger
		} }
	} }
	Optional = { Left = "modifier" Right = CountryModifierDef }
	Optional = { Left = "duration" Right = PInt }
	Optional = { Left = "cost" Right = Double }
}

(Type LeaderPersonalityFile) = {
	(Ch N N) = {
		Left = { Type = String }
		Right = LeaderPersonalityDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "desc_*" Left IfNot = NoCheckKey)
		(CheckKey "*_die_desc" Left IfNot = NoCheckKey)
	}
}

(Type LeaderPersonalityDef) = {
	Optional = { Left = "allow" Right = {
		Optional = { Left = "is_admiral" Right = Bool }
		Optional = { Left = "galley_fraction" Right = Double }
		Optional = { Left = "light_ship_fraction" Right = Double }
		Optional = { Left = "heavy_ship_fraction" Right = Double }
		Optional = { Left = "artillery_fraction" Right = Double }
		Optional = { Left = "infantry_fraction" Right = Double }
		Optional = { Left = "cavalry_fraction" Right = Double }
	} }
	
	Inherits = ProvinceModifierDef
}

(Type RulerPersonalityFile) = {
	(Ch N N) = {
		Left = { Type = String }
		Right = RulerPersonalityDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "desc_*" Left IfNot = NoCheckKey)
		(CheckKey "*_die_desc" Left IfNot = NoCheckKey)
	}
}

(Type RulerPersonalityDef) = {
	Optional = { Left = "ruler_allow" Right = RulerPersonalityAllow }
	Optional = { Left = "heir_allow" Right = RulerPersonalityAllow }
	Optional = { Left = "consort_allow" Right = RulerPersonalityAllow }
	
	Optional = { Left = "allow" Right = CountryTrigger }
	Optional = { Left = "chance" Right = RulerPersonalityChance }
	
	Inherits = CountryModifierDef
	
	Optional = { Left = "trade_league_acceptance" Right = Int }
	Optional = { Left = "nation_designer_cost" Right = Int }
	Optional = { Left = "wants_avoid_ugly_borders" Right = Yes }
	Optional = { Left = "wants_disclose_attack" Right = Yes }
	Optional = { Left = "wants_betray_allies" Right = Yes }
	Optional = { Left = "wants_threaten_war" Right = Yes }
	Optional = { Left = "fair_fights" Right = Yes }
	Optional = { Left = "ignore_ae" Right = Yes }
	Optional = { Left = "razing" Right = Yes }
	Optional = { Left = "lower_autonomy" Right = Yes }
	Optional = { Left = "wants_gold" Right = Yes }
	Optional = { Left = "wants_loans" Right = Yes }
	Optional = { Left = "random_troop_moves" Right = Yes }
	Optional = { Left = "wants_sell_provinces" Right = Yes }
	Optional = { Left = "wants_debase" Right = Yes }
	Optional = { Left = "random_insults" Right = Yes }
	Optional = { Left = "wants_explorers" Right = Yes }
	Optional = { Left = "wants_colonies" Right = Yes }
	Optional = { Left = "wants_avoid_loans" Right = Yes }
	Optional = { Left = "wants_avoid_debase" Right = Yes }
	Optional = { Left = "wants_land" Right = Yes }
	Optional = { Left = "wants_heretic_land" Right = Yes }
	Optional = { Left = "wants_excommunicate" Right = Yes }
	Optional = { Left = "wants_heathen_land" Right = Yes }
	Optional = { Left = "wants_condottieri" Right = Yes }
	Optional = { Left = "underestimate_ae" Right = Yes }
	Optional = { Left = "static" Right = Yes }
	Optional = { Left = "knowledge_sharing" Right = Yes }
	
	Optional = { Left = "custom_ai_explanation" Right = Key }

	Optional = { Left = "send_warning_desire" Right = Int }
	Optional = { Left = "gift_chance" Right = Int }
	Optional = { Left = "other_ai_peace_term_bonus" Right = Int }
	Optional = { Left = "immortal" Right = Int }
	Optional = { Left = "royal_marriage_acceptance" Right = Int }
	Optional = { Left = "peace_desire" Right = Int }
	Optional = { Left = "alliance_acceptance" Right = Int }
	Optional = { Left = "heretic_ally_acceptance" Right = Int }
	Optional = { Left = "heathen_ally_acceptance" Right = Int }
	
	Optional = { Left = "building_budget_multiplier" Right = Double }
	Optional = { Left = "war_chance_multiplier" Right = Double }
	Optional = { Left = "easy_war_chance_multiplier" Right = Double }
	Optional = { Left = "other_ai_war_chance_multiplier" Right = Double }
	Optional = { Left = "enemy_strength_multiplier" Right = Double }
	Optional = { Left = "different_religion_war_multiplier" Right = Double }
	Optional = { Left = "other_ai_help_us_multiplier" Right = Double }

	Optional = { Left = "war_priority" Right = {
		(Ch N Y) = { Left = "modifier" Right = {
			Single = { Left = "factor" Right = Double }
			Inherits = CountryTrigger
		} }
	} }
}

(Type RulerPersonalityAllow) = {
	Optional = { Left = "allow" Right = CountryTrigger }
	Optional = { Left = "chance" Right = RulerPersonalityChance }
}

(Type RulerPersonalityChance) = {
	(Ch N Y) = { Left = "modifier" Right = {
		Single = { Left = "factor" Right = Double }
		Inherits = CountryTrigger
	} }
}

(Type InstitutionFile) = {
	(Ch N N) = {
		Left = { Type = String }
		Right = InstitutionDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "desc_*" Left IfNot = NoCheckKey)
		(CheckKey "*_date" Left IfNot = NoCheckKey)
	}

}

(Type InstitutionDef) = {
	Single = { Left = "penalty" Right = Double }
	Single = { Left = "bonus" Right = CountryModifierDef }
	Optional = { Left = "historical_start_date" Right = Date }
	Optional = { Left = "historical_start_province" Right = LandProvince }
	Optional = { Left = "trade_company_efficiency" Right = Double }
	Single = { Left = "history" Right = ProvinceTrigger }
	Optional = { Left = "can_start" Right = ProvinceTrigger }
	Optional = { Left = "start_chance" Right = PInt }
	Optional = { Left = "on_start" Right = { CountryEventId ProvinceEventId } }
	Single = { Left = "can_embrace" Right = ProvinceTrigger }
	Single = { Left = "embracement_speed" Right = EmbracementSpeed }
	Single = { Left = "ai_will_do" Right = AiWillDo }
}

(Type EmbracementSpeed) = {
	(Ch N Y) = { Left = "modifier" Right = EmbracementSpeedModifier }
}

(Type EmbracementSpeedModifier) = {
	Single = { Left = "factor" Right = Double }
	Optional = { Left = "force_potential" Right = Bool }
	Optional = { Left = "scale" Right = Bool }
	Optional = { Left = "potential" Right = ProvinceTrigger }
	Inherits = ProvinceTrigger
}

(Type GovernmentFile) = {
	Optional = { Left = "pre_dharma_mapping" Right = {
		(Ch Y N) = { Left = { Type = String } Right = {
			Single = { Left = "government" Right = Government }
			Single = { Left = "legacy_government" Right = LegacyGovernment }
		} }
	} }
	(Ch N N) = { Left = { Type = String } Right = GovernmentDef UniqueId = Left }
}

(Type GovernmentDef) = {
	#(CheckKey "*" Left IfNot = NoCheckKey)
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.720987/page-68#post-22051318
	#(CheckKey "*_ruler" Left IfNot = NoCheckKey)
	#(CheckKey "*_ruler_female" Left IfNot = NoCheckKey)
	(CheckKey "*_desc" Left IfNot = NoCheckKey)
	
	Optional = { Left = "color" Right = { Color FloatColor } }
	Optional = { Left = "basic_reform" Right = { GovernmentReform } }
	Optional = { Left = "legacy_government" Right = { (PdoList N) = { Type = String UniqueId = Right } } }
	Optional = { Left = "reform_levels" Right = { (Ch Y N) = { Left = { Type = String } Right = ReformLevelDef (CheckKey "*" Left IfNot = NoCheckKey) } } }
	(Ch N N) = { Left = "exclusive_reforms" Right = { (PdoList Y) = { Type = GovernmentReform } } }
}

(Type ReformLevelDef) = {
	Single = { Left = "reforms" Right = { (PdoList Y) = { Type = String (CheckKey "*" Right IfNot = NoCheckKey) (CheckKey "*_desc" Right IfNot = NoCheckKey) } } }
}

(Type OldGovernmentDef) = {
	(CheckKey "*" Left IfNot = NoCheckKey)
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.720987/page-68#post-22051318
	#(CheckKey "*_ruler" Left IfNot = NoCheckKey)
	#(CheckKey "*_ruler_female" Left IfNot = NoCheckKey)
	(CheckKey "*_desc" Left IfNot = NoCheckKey)
	
	Optional = { Left = "government_abilities" Right = { (PdoList Y) = { Type = String } } }
	Optional = { Left = "claim_states" Right = Bool }
	Optional = { Left = "has_russian_abilities" Right = Bool }
	Optional = { Left = "monarchy" Right = Bool }
	Optional = { Left = "is_trading_city" Right = Bool }
	Optional = { Left = "has_harem" Right = Bool }
	Optional = { Left = "militarised_society" Right = Bool }
	Optional = { Left = "maintain_dynasty" Right = Bool }
	Optional = { Left = "queen" Right = Bool }
	Optional = { Left = "monastic" Right = Bool }
	Optional = { Left = "valid_for_new_country" Right = Bool }
	Optional = { Left = "republican_name" Right = Bool }
	Optional = { Left = "republic" Right = Bool }
	Optional = { Left = "dictatorship" Right = Bool }
	Optional = { Left = "royal_marriage" Right = Bool }
	Optional = { Left = "tribal" Right = Bool }
	Optional = { Left = "allow_convert" Right = Bool }
	Optional = { Left = "allow_vassal_alliance" Right = Bool }
	Optional = { Left = "allow_vassal_war" Right = Bool }
	Optional = { Left = "nomad" Right = Bool }
	Optional = { Left = "religion" Right = Bool }
	Optional = { Left = "papacy" Right = Bool }
	Optional = { Left = "allow_westernize" Right = Bool }
	Optional = { Left = "allow_migration" Right = Bool }
	Optional = { Left = "native_mechanic" Right = Bool }
	Optional = { Left = "boost_income" Right = Bool }
	Optional = { Left = "dutch_mechanics" Right = Bool }
	Optional = { Left = "is_elective" Right = Bool }
	Optional = { Left = "can_use_trade_post" Right = Bool }
	Optional = { Left = "rulers_can_be_generals" Right = Bool }
	Optional = { Left = "can_form_trade_league" Right = Bool }
	Optional = { Left = "heirs_can_be_generals" Right = Bool }
	Optional = { Left = "allow_force_tributary" Right = Bool }
	Optional = { Left = "has_meritocracy" Right = Bool }
	Optional = { Left = "has_pashas" Right = Bool }
	Optional = { Left = "foreign_slave_rulers" Right = Bool }
	Optional = { Left = "heir" Right = Bool }

	Optional = { Left = "duration" Right = Int }
	Optional = { Left = "ai_importance" Right = Int }
	Optional = { Left = "min_autonomy" Right = Int }
	Optional = { Left = "max_states" Right = Int }
	Optional = { Left = "different_religion_acceptance" Right = Int }
	Optional = { Left = "different_religion_group_acceptance" Right = Int }
	Optional = { Left = "color" Right = AnyColor }

	Optional = { Left = "ai_will_do" Right = AiWillDo }
	
	Optional = { Left = "valid_for_nation_designer" Right = Bool }
	Optional = { Left = "nation_designer_cost" Right = Int }
	Optional = { Left = "nation_designer_trigger" Right = CountryTrigger }
	
	(Ch N Y) = { Left = "faction" Right = Faction }
	
	#Optional = { Left = "fixed_rank" Right = GovernmentRank }
	#Single = { Left = "rank" Right = {
	#	(Ch Y N) = { Left = { Type = GovernmentRank } Right = CountryModifierDef }
	#} }
	
	Optional = { Left = "has_parliament" Right = Bool }
	Optional = { Left = "free_city" Right = Bool }
	Optional = { Left = "has_devotion" Right = Bool }
	#Optional = { Left = "unique_government" Right = Bool }
	
	Inherits = CountryModifierDef
}

(Type AiWillDo) = {
	Optional = { Left = "factor" Right = NnDbl }
	(Ch N Y) = { Left = "modifier" Right = Modifier }
}

(Type Modifier) = {
	Inherits = FactorModifier
	Optional = { Left = "factor" Right = NnDbl }
	
	Inherits = CountryTrigger
	
}

(Type FervorFile) = {
	(Ch N N) = { Left = { Type = String } Right = FervorDef UniqueId = Left }
}

(Type FervorDef) = {
	(CheckKey "*" Left IfNot = NoCheckKey)
	(CheckKey "*_short" Left IfNot = NoCheckKey)

	Single = { Left = "cost" Right = Int }
	Single = { Left = "effect" Right = CountryModifierDef }
	Single = { Left = "ai_will_do" Right = AiWillDo }
}

(Type ClientStatesFile) = {
	(Ch N N) = { Left = { Type = String } Right = ClientStateDef UniqueId = Left }
}

(Type ClientStateDef) = {
	Optional = { Left = "region" Right = Region }
	Optional = { Left = "area" Right = Area }
	Optional = { Left = "superregion" Right = SuperRegion }
	Optional = { Left = "province_group" Right = ProvinceGroup }
	OneOf = { region area province_group superregion }
	AtMostOne = { region area province_group superregion }
	
	(Ch N N) = { Left = "name" Right = ClientNameDef }
}

(Type ClientNameDef) = {
	Single = { Left = "name" Right = Key }
	Single = { Left = "trigger" Right = ClientNameProvinceTrigger }
}

(Type ClientNameProvinceTrigger) = {
	ContextValidator = ClientNameProvinceTrigger
}

(ContextValidator ClientNameProvinceTrigger) = {
	Inherits = ProvinceTrigger
	FromTarget = Country
}

(Type CustomIdeasFile) = {
	(Ch N N) = { Left = { Type = String } Right = CustomIdeaGroupDef UniqueId = Left }
}

(Type CustomIdeaGroupDef) = {
	Single = { Left = "category" Right = Trait }
	(Ch N N) = {
		Left = { Type = String }
		Right = CustomIdeaDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "*_desc" Left IfNot = NoCheckKey)
	}
	
}

(Type CustomIdeaDef) = {
	Optional = { Left = "max_level" Right = Int }
	Optional = { Left = "default" Right = Int }
	(Ch Y N) = { Left = { Type = LevelCostString } Right = Int }
	Optional = { Left = "chance" Right = AiWillDo }
	Optional = { Left = "enabled" Right = GlobalTrigger }
	
	CheckLevelCostInRange

	Inherits = CountryModifierDef
}

(Type DiplomaticActionsFile) = {
	(Ch N N) = { Left = { Type = String } Right = DiplomaticActionDef UniqueId = Left }
}

(Type DiploActionCountryTrigger) = {
	ContextValidator = DiploActionCountryTrigger
}

(ContextValidator DiploActionCountryTrigger) = {
	Inherits = CountryTrigger
	FromTarget = Country
}

(Type DiplomaticActionDef) = {
	(Ch N Y) = { Left = "condition" Right = {
		Single = { Left = "tooltip" Right = Key }
		Single = { Left = "potential" Right = DiploActionCountryTrigger }
		Single = { Left = "allow" Right = DiploActionCountryTrigger }
	} }
	
	Optional = { Left = "ai_will_do" Right = AiWillDo }
	Optional = { Left = "effect" Right = CountryCommandFromCountry }
}

Global = {
(Type CountryCommandFromCountry) = {
	ContextValidator = CountryCommandFromCountry
}
}

(ContextValidator CountryCommandFromCountry) = {
	Inherits = CountryCommand
	FromTarget = Country
}

(Type GovernmentNamesFile) = {
	(Ch N N) = {
		Left = { Type = String }
		Right = GovernmentNamesDef
		(UniqueId IfNot = GovernmentNames.NoCheckUniqueKey) = Left
	}
}

(Type GovernmentNamesDef) = {
	# If GovernmentNames.NoCheckUniqueKey is set should these be optional?
	Single = { Left = "rank" Right = RankList }
	Single = { Left = "ruler_male" Right = RankList }
	Single = { Left = "ruler_female" Right = RankList }
	Optional = { Left = "heir_male" Right = RankList }
	Optional = { Left = "heir_female" Right = RankList }
	Optional = { Left = "consort_male" Right = RankList }
	Optional = { Left = "consort_female" Right = RankList }
	Single = { Left = "trigger" Right = CountryTrigger }
	Optional = { Left = "government_reform" Right = GovernmentReform }
}

(Type RankList) = {
	(Ch Y N) = { Left = { Type = GovernmentRank } Right = Key }
}

(Type ParliamentBribesFile) = {
	(Ch N N) = {
		Left = { Type = String }
		Right = ParliamentBribeDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
	}

}

(Type ParliamentBribeDef) = {
	Single = { Left = "trigger" Right = CountryTriggerProvFrom }
	Single = { Left = "effect" Right = CountryCommandProvFrom }
	Single = { Left = "ai_will_do" Right = AiWillDo }
}

(Type CountryCommandProvFrom) = {
	ContextValidator = CountryCommandProvFrom
}

(ContextValidator CountryCommandProvFrom) = {
	Inherits = CountryCommand
	FromTarget = Province
}

(Type CountryTriggerProvFrom) = {
	ContextValidator = CountryTriggerProvFrom
}

(ContextValidator CountryTriggerProvFrom) = {
	Inherits = CountryTrigger
	FromTarget = Province
}

(Type ParliamentIssuesFile) = {
	(Ch N N) = {
		Left = { Type = String }
		Right = ParliamentIssuesDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
	}
}

(Type ParliamentIssuesDef) = {
	Single = { Left = "category" Right = PInt }
	Optional = { Left = "allow" Right = CountryTrigger }
	Optional = { Left = "effect" Right = CountryCommand }
	Optional = { Left = "modifier" Right = CountryModifierDef }
	Optional = { Left = "ai_will_do" Right = AiWillDo }
	Optional = { Left = "on_issue_taken" Right = CountryCommand }
	Optional = { Left = "chance" Right = AiWillDo }

}



(Type EstateFile) = {
	(Ch N N) = { Left = { Type = String } Right = EstateDef UniqueId = Left }
}

(Type EstateDef) = {
	(CheckKey "*" Left IfNot = NoCheckKey)
	(CheckKey "*_desc" Left IfNot = NoCheckKey)
	
	Single = { Left = "icon" Right = { IconRef = GFX_estates_icons } }
	Single = { Left = "color" Right = AnyColor }
	
	Optional = { Left = "keep_on_conquest" Right = Bool }
	Optional = { Left = "always_remove_on_religious_conquest" Right = Bool }
	
	Optional = { Left = "min_territory" Right = Double }
	Optional = { Left = "min_provinces_to_want_territory" Right = NnInt }
	(Ch N Y) = { Left = "wanted_territory_modifier" Right = {
		Single = { Left = "desc" Right = Key }
		Single = { Left = "trigger" Right = CountryTrigger }
		Single = { Left = "value" Right = Int }
	} }
	
	Single = { Left = "trigger" Right = CountryTrigger }
	Single = { Left = "province_trigger" Right = ProvinceTrigger }
	
	Optional = { Left = "start_territory_weight" Right = Double }
	Optional = { Left = "independence_trigger" Right = ProvinceTrigger }
	Optional = { Left = "territory_power_modifier" Right = Double }
	Optional = { Left = "independence_government" Right = Government }
	Optional = { Left = "independence_tech_group" Right = TechGroup }
	
	Single = { Left = "min_autonomy" Right = NnInt }
	
	Single = { Left = "country_modifier_happy" Right = CountryModifierDef }
	Single = { Left = "country_modifier_neutral" Right = CountryModifierDef }
	Single = { Left = "country_modifier_angry" Right = CountryModifierDef }
	
	Single = { Left = "province_modifier_happy" Right = ProvinceModifierDef }
	Single = { Left = "province_modifier_neutral" Right = ProvinceModifierDef }
	Single = { Left = "province_modifier_angry" Right = ProvinceModifierDef }
	
	(Ch N Y) = { Left = "autonomy_does_not_affect" Right = { ProvinceModifierDoubleKey CountryModifierDoubleKey } }
	
	Optional = { Left = "raze_power_gain" Right = Double }
	
	Single = { Left = "base_influence" Right = Int }
	(Ch N Y) = { Left = "influence_modifier" Right = {
		Single = { Left = "desc" Right = Key }
		Single = { Left = "trigger" Right = CountryTrigger }
		Single = { Left = "influence" Right = Int }
	} }
	
	(Ch N Y) = { Left = "loyalty_modifier" Right = {
		Single = { Left = "desc" Right = Key }
		Single = { Left = "trigger" Right = CountryTrigger }
		Single = { Left = "loyalty" Right = Int }
	} }
	
	(Ch N Y) = { Left = "ai_territory_modifier" Right = {
		Single = { Left = "trigger" Right = CountryTrigger }
		Single = { Left = "value" Right = Int }
	} }
	
	(Ch N Y) = { Left = "custom_name" Right = {
		Single = { Left = "desc" Right = Key }
		Single = { Left = "trigger" Right = CountryTrigger }
	} }
	
	Single = { Left = "ai_grant_province" Right = {
		Optional = { Left = "factor" Right = NnDbl }
		(Ch N Y) = { Left = "modifier" (Right ProvinceAiWillDoModifier) = {
			Inherits = FactorModifier
			Single = { Left = "factor" Right = NnDbl }
			
			Inherits = ProvinceTrigger
		} }
	} }
	
	(Ch N Y) = { Left = "interaction" Right = {
		Single = { Left = "name" Right = Key }
		Single = { Left = "icon" Right = { IconRef = interaction } }
		Single = { Left = "years_between_use" Right = NnInt }
		Single = { Left = "trigger" Right = CountryTrigger }
		Single = { Left = "effect" Right = CountryCommand }
		Optional = { Left = "potential" Right = CountryTrigger }
		Single = { Left = "ai_will_do" Right = {
			Optional = { Left = "factor" Right = NnDbl }
			(Ch N Y) = { Left = "modifier" Right = {
				Inherits = FactorModifier
				Single = { Left = "factor" Right = NnDbl }
				
				Inherits = CountryTrigger
			} }
		} }
	} }
}








