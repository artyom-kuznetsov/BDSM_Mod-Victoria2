
(ContextValidator Trigger) = { Members = {
	(N N) = { Left = { Type = Province } Right = ProvTrigger }

} }

{% for scope in ['Char', 'Prov', 'Title'] %}

(ContextValidator {{ scope }}Trigger) = { Members = {
	# province_id works: https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-99#post-20211840
	(N Y) = { Left = { "province" "province_id" } Right = { Bool MaybeEventTargetProvTitle Province AnyTitle } }
} }

{% endfor %}

(ContextValidator ProvTrigger) = { Members = {
	(N N) = { Left = "any_neighbor_province" Right = ProvTriggerWithCount }
	(N N) = { Left = "any_province_lord" Right = CharTriggerWithCount }
	(N N) = { Left = "any_province_character" Right = CharTriggerWithCount }
	
	(Y  ) = { Left = { "port" "is_coastal" } Right = Bool }
	(Y  ) = { Left = "is_capital" Right = Bool }
	(A Y) = { Left = "title" Right = { AnyTitle MaybeEventTargetTitle } }
	(N Y) = { Left = "num_of_settlements" Right = { NnInt VariableName } } # Can have comparison operators
	(N Y) = { Left = "revolt_risk" Right = { NnDbl VariableName } } # Can have comparison operators
	(A Y) = { Left = "controlled_by" Right = { AnyTitle MaybeEventTargetChar PrefixedCharId VariousOwners } }
	(Y  ) = { Left = "is_land" Right = Bool }
	(A Y) = { Left = "terrain" Right = Terrain }
	
	(N N) = { Left = "owner" Right = CharTrigger }
} }

(ContextValidator CharTrigger) = { Members = {
	(N N) = { Left = "capital_scope" Right = ProvTrigger }
	(N N) = { Left = "location" Right = ProvTrigger }

	(A Y) = { Left = "title" Right = { AnyTitle MaybeEventTargetTitle } }
	(A Y) = { Left = "province_id" Right = Province }
	(Y  ) = { Left = "port" Right = Bool }
	# https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-125#post-22682852
	# Not sure if this should be changed, since province 0 is almost never valid. But some vanilla bugs can cause characters to end up stuck there anyway. Usually though use of unsafe_destroy_landed_title. And those characters generate all kinds of errors with distance checks, etc. So I've added maintenance events to move them out of there, and I'm using 'at_location = 0' checks for that.
	(N Y) = { Left = "at_location" Right = { Type = MaybeEventTargetCharProvTitle Type = Province Literal = "0" Type = AnyTitle Type = CharTargetExcludingMaybeEventTarget } }
	(N Y) = { Left = "owns" Right = { MaybeEventTargetProv LandProvince } }
	(N Y) = { Left = "completely_controls" Right = { MaybeEventTargetTitle AnyTitle } }
	(N Y) = { Left = "is_capital" Right = { MaybeEventTargetProvTitle RhsFancyScopeOptionToProv LandProvince AnyTitle } }

} }

(ContextValidator TitleTrigger) = { Members = {
	(N N) = { Left = "capital_scope" Right = ProvTrigger }  # Does this actually work? No idea
	(N N) = { Left = "location" Right = ProvTrigger }
	
	(A Y) = { Left = "is_located_in" Right = { MaybeEventTargetCharTitle } }
	
	(N N) = { Left = "owner" Right = CharTrigger }
	(N Y) = { Left = "num_of_settlements" Right = { NnInt VariableName } } # Can have comparison operators

} }

(ContextValidator Command) = { Members = {
	(N N) = { Left = { Type = Province } Right = ProvCommand }
} }

(ContextValidator ProvCommand) = { Members = {
	(N N) = { Left = "random_province_lord" Right = CharRandomCommand }
	(N N) = { Left = "any_province_lord" Right = CharMaybeLimitCommand }
	(N N) = { Left = "random_province_character" Right = CharRandomCommand }
	(N N) = { Left = "any_province_character" Right = CharMaybeLimitCommand }
	
	(N N) = { Left = "any_neighbor_province" Right = ProvMaybeLimitCommand }
	(N N) = { Left = "random_neighbor_province" Right = ProvRandomCommand }

	(Y  ) = { Left = "clear_revolt" Right = Yes }
	(N N) = { Left = "owner" Right = CharCommand }

} }

(ContextValidator TitleCommand) = { Members = {
	(N N) = { Left = "location" Right = ProvCommand }
	(N N) = { Left = "capital_scope" Right = ProvCommand } # Does this actually work? No idea

	(Y  ) = { Left = "rebel_defection" Right = Yes }
	(N N) = { Left = "owner" Right = CharCommand }

} }

(ContextValidator CharCommand) = { Members = {
	(N N) = { Left = "random_province_lord" Right = CharRandomCommand }
	
	(N N) = { Left = "capital_scope" Right = ProvCommand }
	(N N) = { Left = "location" Right = ProvCommand }

} }
















