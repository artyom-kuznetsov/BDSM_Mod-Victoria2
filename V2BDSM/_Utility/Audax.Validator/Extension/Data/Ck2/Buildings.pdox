(Validator Buildings) = {
	Type = GroupValidator
	FriendlyName = "Buildings and wonders"
	
	Validator = {
		Type = Default
		(FileGroup "common\buildings" "*.txt")
		ValidatorName = Buildings
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\holding_types" "*.txt")
		ValidatorName = HoldingTypeFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\wonders" "*.txt")
		ValidatorName = WonderFile
	}
	
	Validator = {
		Type = Default
		(FileGroup "common\wonder_upgrades" "*.txt")
		ValidatorName = WonderUpgradeFile
	}
}

(Type HoldingTypeFile) = {
	(Ch N N) = { Left = { Type = HoldingType } Right = HoldingTypeDef UniqueId = Left }
}

(Type HoldingTypeDef) = {
	Optional = { Left = "trigger" Right = ProvTriggerFromChar }
}

(Type WonderUpgradeFile) = {
	(Ch N N) = {
		Left = { Type = String }
		Right = WonderUpgradeDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "*_desc" Left IfNot = NoCheckKey)
	}
}

(Type WonderUpgradeDef) = {
	Optional = { Left = "potential" Right = WonderDefWithWonderBuildingTrigger }
	Optional = { Left = "allow" Right = WonderDefWithWonderBuildingTrigger }
	Optional = { Left = "active" Right = WonderDefUpgradeTrigger }
	
	Optional = { Left = "picture" Right = String }
	Optional = { Left = "show_in_history" Right = Bool }

	Optional = {
		Left = "flags"
		Right = {
			(PdoList Y) = {
				Type = String
				(LocalOp "set" "[R]" AddSetter WonderUpgradeFlag)
			}
		}
	}

	Single = { Left = "build_time" Right = NnInt }
	Single = { Left = "gold_cost_flat" Right = Double }
	Single = { Left = "gold_cost_ticking" Right = Double }
	
	Optional = { Left = "ai_will_do" Right = AiWillDoWonderUpgrade }

	Optional = { Left = "owner_modifier" Right = {
		Inherits = CharModifier
		Optional = { Left = "command_modifier" Right = CommandModifierDef }
	} }
	Optional = { Left = "local_modifier" Right = ProvModifier }
}

(Type AiWillDoWonderUpgrade) = {
	Single = { Left = "factor" Right = NnDbl }
	Optional = { Left = "trigger" Right = WonderDefWithWonderBuildingTrigger }
	(Ch N Y) = { Left = { "modifier" "mult_modifier" } Right = AiWillDoModifierWonderUpgrade }
}

(Type AiWillDoModifierWonderUpgrade) = {
	Single = { Left = "factor" Right = NnDbl }
	Inherits = WonderDefWithWonderBuildingTrigger
}

(Type WonderFile) = {
	(Ch N N) = {
		Left = { Type = String }
		Right = WonderDef
		UniqueId = Left
		(CheckKey "*" Left IfNot = NoCheckKey)
		(CheckKey "*_desc" Left IfNot = NoCheckKey)
	}
}

(Type WonderDef) = {
	Optional = { Left = "available_upgrades" Right = { (PdoList Y) = { Type = WonderUpgrade } } }
	Single = { Left = "picture" Right = String }
	Optional = { Left = "model" Right = String }
	Optional = { Left = "show_model" Right = Bool }
	
	Optional = { Left = "background_overrides" Right = {
		(Ch Y N) = { Left = { Type = String } Right = String }
	} }

	Optional = {
		Left = "flags"
		Right = {
			(PdoList Y) = {
				Type = String
				(LocalOp "set" "[R]" AddSetter WonderFlag)
			}
		}
	}

	Optional = { Left = "is_in_water" Right = Bool }
	Optional = { Left = "allow_coastal" Right = Bool }
	Optional = { Left = "allow_construction" Right = Bool }
	
	Optional = { Left = "potential" Right = WonderDefWithoutWonderBuildingTrigger }
	Optional = { Left = "active" Right = WonderDefWithWonderBuildingTrigger }
	
	(Child N N 4 4) = { Left = "stage" Right = StageDef }
}

(Type StageDef) = {
	Single = { Left = "build_time" Right = NnInt }
	Single = { Left = "gold_cost_flat" Right = Double }
	Single = { Left = "gold_cost_ticking" Right = Double }
	
	Single = { Left = "restore_time" Right = NnInt }
	Single = { Left = "restore_cost_flat" Right = Double }
	Single = { Left = "restore_cost_ticking" Right = Double }

	Single = { Left = "upgrade_slots" Right = Int }
	Single = { Left = "loot_time" Right = NnInt }
	
	Optional = { Left = "owner_modifier" Right = CharModifier }
	Optional = { Left = "local_modifier" Right = ProvModifier }
	
	Optional = { Left = "allow" Right = WonderDefWithWonderBuildingTrigger }
}

(Type WonderDefWithWonderBuildingTrigger) = { ContextValidator = WonderDefWithWonderBuildingTrigger }
(ContextValidator WonderDefWithWonderBuildingTrigger) = {
	Inherits = CharTrigger
	FromFromTarget = WonderBuilding
	FromFromFromTarget = Prov
}

(Type WonderDefWithoutWonderBuildingTrigger) = { ContextValidator = WonderDefWithoutWonderBuildingTrigger }
(ContextValidator WonderDefWithoutWonderBuildingTrigger) = {
	Inherits = CharTrigger
	FromFromFromTarget = Prov
}

(Type WonderDefUpgradeTrigger) = { ContextValidator = WonderDefUpgradeTrigger }
(ContextValidator WonderDefUpgradeTrigger) = {
	Inherits = CharTrigger
	FromTarget = WonderUpgrade
	FromFromTarget = WonderBuilding
	FromFromFromTarget = Prov
}

(Type Buildings) = {
	Optional = { Left = "nomad" Right = NomadBuildingGroup }
	(Ch Y N) = { Left = { Type = String } Right = NormalBuildingGroup }
}

(Type NomadBuildingGroup) = {
	Child = { Left = { Type = String } Right = NomadBuildingDef }
}

(Type NormalBuildingGroup) = {
	Child = { Left = { Type = String } Right = NormalBuildingDef }
}

(Type NomadBuildingDef) = {
	# This may apply to other triggers as well, no idea until someone tests
	Optional = { Left = "trigger" Right = NomadBuildProvTrigger }
	Optional = { Left = "is_active_trigger" Right = NomadBuildProvTrigger }
	Inherits = BuildingDef
}

(Type NormalBuildingDef) = {
	Optional = { Left = "trigger" Right = BuildProvTrigger }
	Optional = { Left = "is_active_trigger" Right = BuildProvTrigger }
	Inherits = BuildingDef
}

(Type BuildingDef) = {
	UniqueId = Left
	(CheckKey "*" Left IfNot = NoCheckKey)
	Optional = { Left = "desc" Right = Key }
	Single = { Left = { "gold_cost" "prestige_cost" "piety_cost" } Right = NnDbl }
	Single = { Left = "build_time" Right = NonNegInt }
	
	Optional = { Left = "prerequisites" Right = { (PdoList Y) = { Type = ImprovementValue } } }
	Optional = { Left = "not_if_x_exists" Right = { (PdoList Y) = { Type = ImprovementValue } } }
	Optional = { Left = "upgrades_from" Right = ImprovementValue }
	Optional = { Left = "ai_creation_factor" Right = NonNegInt }
	Optional = { Left = "auto_add_at_year" Right = NonNegInt }
	
	Optional = { Left = "max_tradeposts" Right = NonNegInt }
	Optional = { Left = "add_number_to_name" Right = Bool }
	# This is required according to
	# http://forum.paradoxplaza.com/forum/showthread.php?597480-The-Validator-Find-errors-quickly-and-with-minimal-pain!&p=18042012&viewfull=1#post18042012
	# http://forum.paradoxplaza.com/forum/showthread.php?800610-Problem-with-custom-building-trees.&p=18041430&viewfull=1#post18041430
	# But apparently it is not required
	# http://forum.paradoxplaza.com/forum/showthread.php?597480-The-Validator-Find-errors-quickly-and-with-minimal-pain!&p=18432144&viewfull=1#post18432144
	Optional = { Left = "extra_tech_building_start" Right = Double }
	Optional = { Left = "replaces" Right = Improvement }
	Optional = { Left = "port" Right = Bool }
	
	Optional = { Left = "start" Right = StartProvTrigger }
	Optional = { Left = "potential" Right = BuildProvTrigger }
	
	(Ch Y N) = { Left = { Type = Unit Type = SpecialUnit } Right = Int }
	
	Optional = { Left = "retinuesize" Right = Double }
	Optional = { Left = "tradevalue" Right = Double }
	Optional = { Left = "scouting" Right = Bool }
	
	# Possibly only for tribal	
	Optional = { Left = "convert_to_city" Right = ImprovementValue }
	Optional = { Left = "convert_to_castle" Right = ImprovementValue }
	Optional = { Left = "convert_to_temple" Right = ImprovementValue }
	Optional = { Left = "convert_to_tribal" Right = ImprovementValue }
	
	Optional = { Left = "ai_republic_modifier" Right = Double }
	Optional = { Left = "ai_feudal_modifier" Right = Double }

	Inherits = Modifier
}

(Type StartProvTrigger) = { ContextValidator = StartProvTrigger }

(ContextValidator StartProvTrigger) = {
	Inherits = TitleTrigger
	FromTarget = Char
}

(Type BuildProvTrigger) = { ContextValidator = BuildProvTrigger }

(ContextValidator BuildProvTrigger) = {
	Inherits = ProvTrigger
	FromTarget = Char
	FromFromTarget = Title
}

(Type NomadBuildProvTrigger) = { ContextValidator = NomadBuildProvTrigger }

(ContextValidator NomadBuildProvTrigger) = {
	Inherits = ProvTrigger # Might be this instead of title???s
	FromTarget = Char
}

