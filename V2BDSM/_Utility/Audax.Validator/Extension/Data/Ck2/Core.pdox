(If IfNot = EnableNonFactorCheck) = {
	(AddFlag FactorModifier.DisableNonFactorCheck)
}

(AddFlag Add1)

Includes = {
	Options
	
	Buildings
	Bloodlines
	Bookmarks
	CbTypes
	CombatTactics
	Cultures
	Decisions
	Disease
	Dynasties
	Government
	JobActions
	Localization
	Modifiers
	Nicknames
	Objectives
	OnActions
	Interface
	# RegionColors # apparently not yet used
	Religions
	Tech
	Titles
	Trade
	Traits
	Map
	Music
	War
	Artifacts
	Societies
		
	"History\Characters"
	"History\Provinces"
	"History\Wars"
	"History\Titles"
	"History\OffmapPowers"

	Events
	"Calls\_Main"
	
	# Common
	"..\_Common\FactorModifier"

}

Global = {

(Type.Or Key If = NoCheckKey) = { Type = String }
(Type.Or Key IfNot = NoCheckKey) = { Type = LocalizationKey }
# Is there anything more specific?
(Type Race) = String

(Literal Yes) = "yes"
(Literal No) = "no"
(Literal NewChar) = "new_character"
(Literal Attacker) = "attacker"
(Literal Defender) = "defender"
(Literal None) = "none"
(Literal New) = "new"
(Literal All) = "all"
(Literal Any) = "any"
(Literal Liege2) = "liege"
(Literal CurrentHeir) = "current_heir"
(Literal PlayerHeir) = "player_heir"
(Literal Educator) = "educator"
(Literal Spouse) = "spouse"
(Literal Father) = "father"
(Literal Mother) = "mother"
(Literal TopLiege) = "top_liege"
(Literal CapitalScope) = "capital_scope"
(Literal CapitalHolding) = "capital_holding"
(Literal PrimaryTitle) = "primary_title"
(Literal MostParticipatingAttacker) = "most_participating_attacker"
(Literal MostParticipatingDefender) = "most_participating_defender"
(Literal MostParticipatingCrusader) = "most_participating_crusader"
(Literal ThirdpartyTitleScope) = "thirdparty_title_scope"
(Literal CrusadeTargetChar) = "crusade_target_char"
(Literal CrusadeBeneficiary) = "crusade_beneficiary"
(Literal RealFatherEvenIfDead) = "real_father_even_if_dead"
(Literal RealFather) = "real_father"
(Literal FatherEvenIfDead) = "father_even_if_dead"
(Type.Or OnlyCharTarget) = {
	Type = MaybeEventTargetChar
	Type = CharTargetExcludingMaybeEventTarget
}
(Type.Or CharTargetExcludingMaybeEventTarget) = {
	Type = CharacterId
	Type = NewChar
	Type = Attacker
	Type = Defender
	Type = PrefixedCharId
	Type = Liege2
	Type = CurrentHeir
	Type = PlayerHeir
	Type = Educator
	Type = Spouse
	Type = Father
	Type = Mother
	Type = TopLiege
	Type = JobTitle
	Type = MostParticipatingAttacker
	Type = MostParticipatingDefender
	Type = MostParticipatingCrusader
	Type = CrusadeTargetChar
	Type = CrusadeBeneficiary
	Type = RealFatherEvenIfDead
	Type = RealFather
	Type = FatherEvenIfDead
}
(Type.Enum Liege) = { Values = { "liege" "LIEGE" } }
(Type.Enum CouncilVotingTopic) = { Values = {
	imprison_character_interaction
	exile_imprisoned_interaction
	execute_imprisoned_interaction
	revoke_title_interaction
	grant_landed_title_interaction
	declare_war_interaction
	release_from_prison_interaction
	enforce_peace
	laws
	
	# Have been tested
	ask_for_vassalization_interaction
	release_vassal_interaction
	retract_vassal_interaction
	transfer_vassal_interaction
	assign_voter_title_interaction
	revoke_voter_title_interaction
	ransom_character_interaction

	# Not tested but probably works
	retire_to_monastery_interaction
	demand_religious_conversion_interaction
	invite_to_court_interaction
	claim_title_interaction
	award_honorary_title_interaction
	revoke_honorary_title_interaction
	send_assassin_interaction
	offer_peace_interaction
	send_gift_interaction
	offer_vassalization_interaction
	arrange_betrothal_interaction
	break_betrothal_interaction
	offer_succession_marrige_interaction
	offer_marrige_interaction
	educate_character_interaction
	abandon_ambition_interaction
	stop_backing_ambition_interaction
	join_ambition_interaction
	grant_vice_royalty_interaction
	settle_adventurer_interaction
	appoint_to_office_interaction
	resign_from_office_interaction
	appoint_commander_interaction
	resign_commander_interaction
	resign_as_commander_interaction
	ask_for_invasion_interaction
	ask_for_divorce_interaction
	divorce_interaction
	ask_for_excommunication_interaction
	call_ally_interaction
	ask_to_lift_excommunication_interaction
	ask_to_join_war_interaction
	ask_to_embargo_interaction
	prepare_invasion_interaction
	make_consort_interaction
	dismiss_consort_interaction
	ask_for_money_interaction
	ask_for_claim_interaction
	ask_for_crusade_interaction
	nominate_bishop_to_pope_interaction
	absorb_clan_interaction
	split_clan_interaction
	form_blood_oath_interaction
	settle_feud_interaction
	form_alliance_interaction
	dissolve_alliance_interaction
	start_coalition_interaction
	leave_coalition_interaction
	buy_favor_interaction
	request_support_interaction
	call_in_favor_interaction
	replace_mercenary_captain_interaction
	stop_enforce_peace_interaction
	ask_to_declare_war_interaction
	form_non_aggression_pact_interaction
	force_join_faction_interaction
	ask_realm_peace_interaction
	ask_council_position_interaction 
} }
(Type.Enum LawType) = { Values = { realm council obligations } }
(Type.Enum Dlc) = { Values = {
	"The Sword of Islam"
	"Legacy of Rome"
	"Sunset Invasion"
	"The Republic"
	"The Old Gods"
	"Sons of Abraham"
	"Rajas of India"
	"Charlemagne"
	"Way of Life"
	"Horse Lords"
	"Zeus"
	"Conclave"
	"Reapers"
	"Game Book"
	"Mystics"
	"Jade Dragon"
	"Holy Fury"
	
	# Stupid aliases that apparently work for no good reason
	"Monks And Mystics"
	"The Reaper's Due"
} }

(Type.Enum BloodlineSuccession) = { Values = { all_descendants matrilineal patrilineal no_inheritance } }
(Type.Enum SuccessionType) = { Values = { "gavelkind" "primogeniture" "feudal_elective" "seniority"
		"catholic_bishopric" "open_elective" "turkish_succession" "patrician_elective" "ultimogeniture"
		"tanistry" "appointment" "papal_succession" "elective_gavelkind"
		"nomad_succession" "offmap_succession" } }
(Type.Enum WarEnd) = { Values = { invalid whitepeace success reverse_demand } }
(Type.Enum OpinionClauseDefinedTypes) = { Values = { LIEGE liege top_liege spouse father mother host } }
(Type.Enum Tier) = { Values = { emperor king duke count baron EMPEROR KING DUKE COUNT BARON } }
(Type.Enum Attribute) = { Values = { diplomacy stewardship intrigue martial learning } }
(Type.Enum Religion) = {
	Import = {
		(FileGroup "common\religions" "*.txt")
		SelectPath = "*\*\[L]"
		Remove = {
			graphical_culture has_coa_on_barony_only crusade_cb playable male_names female_names
			ai_convert_same_group ai_convert_other_group ai_peaceful hostile_within_group
		}
} }
(Type.Enum SuccessionVotingType) = { Import = { (FileGroup "common\succession_voting" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum ReligionGroup) = { Import = { (FileGroup "common\religions" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum ReligionFeature) = { Import = { (FileGroup "common\religion_features" "*.txt") SelectPath = "*\*\[L]" } }
(Type.Enum Culture) = { Import = { (FileGroup "common\cultures" "*.txt") SelectPath = "*\*\color\^\[L]" } }
(Type.Enum CultureGroup) = { Import = { (FileGroup "common\cultures" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum CasusBelli) = { Import = { (FileGroup "common\cb_types" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum Terrain) = { Import = { (FileGroup "map\terrain.txt") SelectPath = "categories\*\[L]" } }
(Type.Enum JobAction) = { Import = { (FileGroup "common\job_actions" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum GraphicalCultureType) = { Import = { (FileGroup "common\graphicalculturetypes" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum Unit) = { Values = { pikemen light_cavalry knights heavy_infantry archers galleys light_infantry heavy_cavalry } }
(Type.Enum JobTitle) = { Import = { (FileGroup "common\job_titles" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum Disease) = { Import = { (FileGroup "common\disease" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum Continent) = { Import = { (FileGroup "map\continent.txt") SelectPath = "*\[L]" } }
(Type.Enum SpecialUnit) = { Import = { (FileGroup "common\special_troops" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum MercenaryType) = { Import = { (FileGroup "common\mercenaries" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum OnActionEvent) = { Import = { (FileGroup "common\on_actions" "*.txt") SelectPath = "*\*\*\[R]" } Import = { (FileGroup "common\on_actions" "*.txt") SelectPath = "*\*\*\*\[R]" } }
(Type.Enum Government) = { Import = { (FileGroup "common\governments" "*.txt") SelectPath = "*\*\[L]" } }
(Type.Enum GeographicalRegion) = { Import = { (FileGroup "map\geographical_region.txt") SelectPath = "*\[L]" } }
(Type.Enum TradeRoute) = { Import = { (FileGroup "common\trade_routes" "*.txt") SelectPath = "*\[L]" } }

(Type.Enum Decision) = { Import = { (FileGroup "decisions" "*.txt") SelectPath = "*\*\[L]" } }
(Type.Enum PureDecision) = { Import = { (FileGroup "decisions" "*.txt") SelectPath = "decisions\*\[L]" } }
(Type.Enum TargettedDecision) = { Import = { (FileGroup "decisions" "*.txt") SelectPath = "targetted_decisions\*\[L]" } Import = { (FileGroup "decisions" "*.txt") SelectPath = "targeted_decisions\*\[L]" } }
(Type.Enum SocietyDecision) = { Import = { (FileGroup "decisions" "*.txt") SelectPath = "society_decisions\*\[L]" } }
(Type.Enum TitleDecision) = { Import = { (FileGroup "decisions" "*.txt") SelectPath = "title_decisions\*\[L]" } }
(Type.Enum SettlementDecision) = { Import = { (FileGroup "decisions" "*.txt") SelectPath = "settlement_decisions\*\[L]" } }
(Type.Enum TradePostDecision) = { Import = { (FileGroup "decisions" "*.txt") SelectPath = "trade_post_decisions\*\[L]" } }
(Type.Enum FortDecision) = { Import = { (FileGroup "decisions" "*.txt") SelectPath = "fort_decisions\*\[L]" } }
(Type.Enum HospitalDecision) = { Import = { (FileGroup "decisions" "*.txt") SelectPath = "hospital_decisions\*\[L]" } }
(Type.Enum PlotDecision) = { Import = { (FileGroup "decisions" "*.txt") SelectPath = "plot_decisions\*\[L]" } }

(Type.Enum HoldingType) = { Values = { "city" "temple" "castle" "fort" "tribal" "nomad" "family_palace" "trade_post" "hospital" } }
(Type.Enum GfxElement) = { Import = { (FileGroup "interface" "*.gfx") SelectPath = "spriteTypes\spriteType\name\[R]" } }
(Type.Enum CountTitleWithProvince) = { Import = { (FileGroup "history\provinces" "*.txt") SelectPath = "title\[R]" } }
(Type.Enum CouncilPosition) = { Import = { (FileGroup "common\council_positions" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum CouncilVotingPattern) = { Import = { (FileGroup "common\council_voting" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum DeathReason) = { Import = { (FileGroup "common\death" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum EventNamespace) = { Import = { (FileGroup "events" "*.txt") SelectPath = "namespace\[R]" } }
(Type.Enum CustomLocalization) = { Import = { (FileGroup "localisation\customizable_localisation" "*.txt") SelectPath = "defined_text\name\[R]" } }
(Type.Enum Artifact) = { Import = { (FileGroup "common\artifacts" "*.txt") SelectPath = "*\[L]" Remove = { "slots" } } }
(Type.Enum ArtifactSlot) = { Import = { (FileGroup "common\artifacts" "*.txt") SelectPath = "slots\*\[L]" } }
(Type.Enum ArtifactFlag) = { Import = { (FileGroup "common\artifacts" "*.txt") SelectPath = "*\flags\*\[R]" } }
(Type.Enum Society) = { Import = { (FileGroup "common\societies" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum CustomModifier) = { Import = { (FileGroup "common\modifier_definitions" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum OffmapPower) = { Import = { (FileGroup "common\offmap_powers" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum TributaryType) = { Import = { (FileGroup "common\tributary_types" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum OffmapPolicy) = { Import = { (FileGroup "common\offmap_powers\policies" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum OffmapStatus) = { Import = { (FileGroup "common\offmap_powers\statuses" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum OffmapFlag) = {
	Import = { (FileGroup "common\offmap_powers\statuses" "*.txt") SelectPath = "*\flags\Item\[R]" }
	Import = { (FileGroup "common\offmap_powers\policies" "*.txt") SelectPath = "*\flags\Item\[R]" }
}
(Type.Enum OffmapPolicyFlag) = {
	Import = { (FileGroup "common\offmap_powers\policies" "*.txt") SelectPath = "*\flags\Item\[R]" }
}
(Type.Enum OffmapStatusFlag) = {
	Import = { (FileGroup "common\offmap_powers\statuses" "*.txt") SelectPath = "*\flags\Item\[R]" }
}
(Type.Enum OffmapLike) = {
	Import = { (FileGroup "common\offmap_powers" "*.txt") SelectPath = "*\holder_succession\likes\*\[L]" }
	Import = { (FileGroup "common\offmap_powers" "*.txt") SelectPath = "*\holder_succession\dislikes\*\[L]" }
}
(Type.Enum Sound) = { Import = { (FileGroup "interface\sound.sfx") SelectPath = "*\[L]" } }
(Type.Enum BloodlineType) = { Import = { (FileGroup "common\bloodlines" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum ElectorStance) = { Import = { (FileGroup "common\succession_voting" "*.txt") SelectPath = "*\elector_stances\*\[L]" } }
(Type.Enum AlternateStartSelectionOption) = { Import = { (FileGroup "common\alternate_start" "*.txt") SelectPath = "*\*\[L]" } }
(Type.Enum AlternateStartSelection) = { Import = { (FileGroup "common\alternate_start" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum ClimateType) = { Import = { (FileGroup "map\climate.txt") SelectPath = "*\[L]" } }
(Type.Enum ReligiousTitle) = { Import = { (FileGroup "common\religious_titles" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum MessageType) = { Import = { (FileGroup "interface\messagetypes.txt") SelectPath = "*\[L]" } }
(Type.Enum Wonder) = { Import = { (FileGroup "common\wonders" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum WonderUpgrade) = { Import = { (FileGroup "common\wonder_upgrades" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum WonderUpgradeFlag) = { Import = { (FileGroup "common\wonder_upgrades" "*.txt") SelectPath = "*\flags\*\[R]" } }
(Type.Enum RetinueSubunit) = { Import = { (FileGroup "common\retinue_subunits" "*.txt") SelectPath = "*\[L]" } }

(Type.Enum SpecialVariableNames) = {
	Values = {
		local_third_party_score
	}
}

(Literal Owner) = "owner"
(Literal ArtifactOwner) = "artifact_owner"
(Literal OriginalArtifactOwner) = "original_artifact_owner"
(Literal OriginalOwner) = "original_owner"
(Literal Location) = "location"
(Literal SecretReligiousCult) = "secret_religious_cult"
(Literal DiscoveredSociety) = "discovered_society"
(Literal CrusadeTarget) = "crusade_target"
(Literal CrusadeTargetTitle) = "crusade_target_title"
(Type.Or SocietyThings) = {
	Type = MaybeEventTargetCharSociety
	Type = SocietyThingsWithoutThis
}
(Type.Or SocietyThingsWithoutThis) = {
	Type = Society
	Type = SecretReligiousSociety
	Type = SecretReligiousCult
	Type = DiscoveredSociety
}
(Type.Or TitleThings) = {
	Type = MaybeEventTargetTitle
	Type = TitleThingsWithoutThis
}
(Type.Or TitleThingsWithoutThis) = {
	Type = AnyTitle
	Type = CrusadeTarget
	Type = CrusadeTargetTitle
}

(Literal HospitalOwner) = "hospital_owner"
(Literal FortOwner) = "fort_owner"
(Literal TradePostOwner) = "trade_post_owner"
(Type.Or VariousOwners) = {
	Type = HospitalOwner
	Type = FortOwner
	Type = TradePostOwner
}

Script = {
	(DataSource Pdo) = { (FileGroup "common\game_rules" "*.txt") }
	MakeDicEnum = {
		KeyName = GameRule
		ElementPath = "*\option\name"
		KeyPath = "^\^\[L]"
		ValuePath = "[R]"
	}
}

(Type.Enum CharacterId) = { Import = { (FileGroup "history\characters" "*.txt") SelectPath = "*\[L]" } }
(Type.Enum DynastyId) = { Import = { (FileGroup "common\dynasties" "*.txt") SelectPath = "*\[L]" } }

(If IfNot = Debug) = {
}

(If If = Debug) = {
	#(Type CharacterId) = Int
	#(Type DynastyId) = Int
	#(Type Trait) = String
}

Script = {
	(DataSource Pdo) = { (FileGroup "common\laws" "*.txt") }

	(MakeEnumValidator SuccessionLaw) = "succession_laws\*\[L]"
	(MakeEnumValidator DeJureLaw) = "de_jure_laws\*\[L]"
	(MakeEnumValidator NormalLaw) = "laws\*\[L]"
	(MakeEnumValidator GenderLaw) = "gender_laws\*\[L]"
	(MakeEnumValidator LawGroup) = "*\*\group\[R]"

}

(Type.Or Law) = {
	Type = SuccessionLaw
	Type = DeJureLaw
	Type = NormalLaw
	Type = GenderLaw
}

Script = {
	(DataSource Pdo) = { (FileGroup "common\buildings" "*.txt") }
	MakeDicEnum = {
		KeyName = Improvement
		ElementPath = "*\*"
		KeyPath = "^\[L]"
		ValuePath = "[L]"
	}
	
	(MakeEnumValidator Building) = "*\[L]"

}

(Type UnitStatsModifier) = {
	Optional = { Left = "pikemen_offensive" Right = Double }
	Optional = { Left = "light_cavalry_offensive" Right = Double }
	Optional = { Left = "knights_offensive" Right = Double }
	Optional = { Left = "heavy_infantry_offensive" Right = Double }
	Optional = { Left = "archers_offensive" Right = Double }
	Optional = { Left = "light_infantry_offensive" Right = Double }
	(Ch Y N) = { Left = { Type = SpecialUnitOffensive } Right = Double }
	
	Optional = { Left = "pikemen_defensive" Right = Double }
	Optional = { Left = "light_cavalry_defensive" Right = Double }
	Optional = { Left = "knights_defensive" Right = Double }
	Optional = { Left = "heavy_infantry_defensive" Right = Double }
	Optional = { Left = "archers_defensive" Right = Double }
	Optional = { Left = "light_infantry_defensive" Right = Double }
	(Ch Y N) = { Left = { Type = SpecialUnitDefensive } Right = Double }

	Optional = { Left = "light_cavalry_morale" Right = Double }
	Optional = { Left = "light_infantry_morale" Right = Double }
	Optional = { Left = "knights_morale" Right = Double }
	Optional = { Left = "archers_morale" Right = Double }
	Optional = { Left = "pikemen_morale" Right = Double }
	Optional = { Left = "heavy_infantry_morale" Right = Double }
	(Ch Y N) = { Left = { Type = SpecialUnitMorale } Right = Double }

}

(Type.Enum ExportToVariableGlobalValue) = { Values = {
	day
	month
	year
} }

(Type.Enum ExportToVariableCharOnlyValue) = { Values = {
	martial
	diplomacy
	intrigue
	stewardship
	learning
	base_health
	demesne_efficiency
	decadence
	dynasty_realm_power
	fertility
	infamy
	monthly_income
	plot_power
	population_factor
	relative_power_to_liege
	religion_authority
	scaled_wealth
	treasury
	wealth
	yearly_income
	age
	ai_ambition
	ai_greed
	ai_honor
	ai_rationality
	ai_zeal
	among_most_powerful_vassals
	combat_rating
	demesne_garrison_size
	demesne_size
	health_traits
	imprisoned_days
	lifestyle_traits
	max_manpower
	num_of_baron_titles
	num_of_children
	num_of_claims
	num_of_consorts
	num_of_count_titles
	num_of_count_titles_in_realm
	num_of_duke_titles
	num_of_dynasty_members
	num_of_emperor_titles
	num_of_extra_landed_titles
	num_of_friends
	num_of_holy_sites
	num_of_king_titles
	num_of_lovers
	num_of_plot_backers
	num_of_prisoners
	num_of_rivals
	num_of_subrealm_castles
	num_of_subrealm_cities
	num_of_spouses
	num_of_titles
	num_of_trade_posts
	num_of_traits
	num_of_unique_dynasty_vassals
	num_of_vassals
	over_max_demesne_size
	over_vassal_limit
	personality_traits
	piety
	population
	population_and_manpower
	prestige
	realm_diplomacy
	realm_intrigue
	realm_learning
	realm_martial
	realm_stewardship
	realm_levies
	max_realm_levies
	realm_size
	republic_total_num_of_trade_posts
	ruled_years
	score
	unused_manpower
	retinue_points_max
	retinue_points_used
	retinue_points_free
	dynastic_prestige
	realm_levies_plus_allies
	society_currency
	health
	day_of_birth
	month_of_birth
	year_of_birth
} }

(Type.Or ExportToVariableCharValue) = {
	Type.Enum = ExportToVariableGlobalValue
	Type.Enum = ExportToVariableCharOnlyValue
}

(Type.Enum ExportToVariableProvOnlyValue) = { Values = {
	religion_authority
	revolt_risk
	num_of_empty_holdings
	num_of_max_settlements
	num_of_settlements
	total_tax_value
} }

(Type.Or ExportToVariableProvValue) = {
	Type.Enum = ExportToVariableGlobalValue
	Type.Enum = ExportToVariableProvOnlyValue
}

(Type.Enum ExportToVariableTitleOnlyValue) = { Values = {
	mercenary_siphon_factor
	num_fitting_characters_for_title
	num_of_buildings
	num_of_feuds
	population
	population_and_manpower
	ruled_years
	unused_manpower
	holding_tax_value
	holding_garrison_percent
	holding_raisable_levy_percent
	holding_total_levy_percent
	holding_garrison
	holding_raisable_levy
	holding_total_levy
} }

(Type.Or ExportToVariableTitleValue) = {
	Type.Enum = ExportToVariableGlobalValue
	Type.Enum = ExportToVariableTitleOnlyValue
}

(Type.Enum RhsFancyScopeOptionToReligion) = { Values = {
	religion_scope
	true_religion_scope
	secret_religion_scope
} }

(Type.Enum RhsFancyScopeOptionToSociety) = { Values = {
	secret_religious_cult
	society

} }

(Type.Enum RhsFancyScopeOptionToCulture) = { Values = {
	culture_scope
	gfx_culture_scope
} }

(Type.Enum RhsFancyScopeOptionToTitle) = { Values = {
	family_palace
	realm
	faction_claimant
	county
	crownlaw_title
	defacto_liege_title
	dejure_liege_title
	clan_title
	capital_holding
	crusade_target
	crusade_target_title
} }

(Type.Enum RhsFancyScopeOptionToProv) = { Values = {
	location
	capital_scope
} }

(Type.Enum RhsFancyScopeOptionToChar) = { Values = {
	wonder_owner
	owner
	holder_scope
	betrothed
	consort
	current_heir
	educator
	highest_ranked_relative
	killer
	liege
	liege_before_war
	lover
	father
	mother
	mother_even_if_dead
	player_heir
	spouse
	supported_claimant
	top_liege
	suzerain
	true_father
	true_father_even_if_dead
	regent
	least_populous_clan_vassal
	least_populous_clan_vassal_except_me
	least_prestigious_clan_vassal
	least_prestigious_clan_vassal_except_me
	most_populous_clan_vassal
	most_populous_clan_vassal_except_me
	most_prestigious_clan_vassal
	most_prestigious_clan_vassal_except_me
	strongest_clan_vassal
	strongest_clan_vassal_except_me
	weakest_clan_vassal
	weakest_clan_vassal_except_me
	crusade_target_char
	crusade_beneficiary
	real_father_even_if_dead
	real_father
	father_even_if_dead
	
	# Apparently these are fixed and ignore modding
	job_chancellor
	job_marshal
	job_spiritual
	job_spymaster
	job_treasurer

} }

(Type.Or RhsFancyScopeOptionToAny) = {
	Type = RhsFancyScopeOptionToReligion
	Type = RhsFancyScopeOptionToSociety
	Type = RhsFancyScopeOptionToCulture
	Type = RhsFancyScopeOptionToTitle
	Type = RhsFancyScopeOptionToProv
	Type = RhsFancyScopeOptionToChar
}

(Type CommandModifierDef) = {
	Optional = { Left = "morale_offence" Right = Double }
	Optional = { Left = "morale_defence" Right = Double }
	Optional = { Left = "defence" Right = Double }
	Optional = { Left = "speed" Right = Double }
	Optional = { Left = "retreat" Right = Double }
	Optional = { Left = "damage" Right = Double }
	Optional = { Left = "siege" Right = Double }
	Optional = { Left = "random" Right = Double }
	Optional = { Left = "flank" Right = Double }
	Optional = { Left = "center" Right = Double }
	Optional = { Left = "cavalry" Right = Double }
	Optional = { Left = "religious_enemy" Right = Double }
	(Ch Y N) = { Left = { Type = Phase } Right = Double }
	(Ch Y N) = { Left = { Type = Unit Type = SpecialUnit } Right = Double }
	(Ch N Y) = { Left = "terrain" Right = Terrain }
	Optional = { Left = "narrow_flank" Right = Double }
	Optional = { Left = "winter_supply" Right = Double }
	Optional = { Left = "winter_combat" Right = Double }
	Optional = { Left = "phase_skirmish_attack" Right = Double }
	Optional = { Left = "phase_pursue_attack" Right = Double }
	Optional = { Left = "phase_melee_attack" Right = Double }
	Optional = { Left = "phase_skirmish_defense" Right = Double }
	Optional = { Left = "phase_pursue_defense" Right = Double }
	Optional = { Left = "phase_melee_defense" Right = Double }
	Optional = { Left = "actual_light_infantry" Right = Double }
	Optional = { Left = "light_cavalry" Right = Double }
	Optional = { Left = "knights" Right = Double }
	Optional = { Left = "archers" Right = Double }
	Optional = { Left = "pikemen" Right = Double }
	Optional = { Left = "actual_heavy_infantry" Right = Double }
}
}




