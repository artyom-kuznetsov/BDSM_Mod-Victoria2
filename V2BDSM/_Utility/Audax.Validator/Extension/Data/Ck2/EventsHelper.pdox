(Type CharEvent If = c) = {
	Inherits = Event
}

(Type ProvEvent If = p) = {
	Inherits = Event
}

(Type UnitEvent If = u) = {
	Inherits = Event
}

(Type TitleEvent If = t) = {
	Inherits = Event
}

(Type SocietyQuestEvent If = society_quest) = {
	Inherits = Event
}

(Type Event) = {
	Single = {
		Left = "id"
		Right = NamespaceEventId
		(LocalOp Validate EventId IfNot = "Events.DisableDuplicateIdChecking")
	}
	
	NodeSwitcher = {
		Node = "id"
		Default = NormalEvent
		
		Switch = {
			"1" = DummyEvent
			"2" = DummyEvent
		}
	}
	
}

(Type DummyEvent) = {
	Single = { Left = "is_triggered_only" Right = { Literal = "yes" } }
}

(Type NamingInfo) = {
	Single = { Left = "text" Right = Key }
	Optional = { Left = "picture" Right = String }
	Optional = { Left = "sound" Right = Sound }
	(Optional If = c) = { Left = "trigger" Right = CharTrigger }
	(Optional If = p) = { Left = "trigger" Right = ProvTrigger }
	(Optional If = t) = { Left = "trigger" Right = TitleTriggerThisChar }
}

(Type PictureInfo) = {
	Single = { Left = "picture" Right = String }
	(Optional If = c) = { Left = "trigger" Right = CharTrigger }
	(Optional If = p) = { Left = "trigger" Right = ProvTrigger }
	(Optional If = t) = { Left = "trigger" Right = TitleTriggerThisChar }
}

# See https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-113#post-21642687 and nearby
(Type ProvRootCharDefaultTrigger) = { ContextValidator = ProvRootCharDefaultTrigger }
(ContextValidator ProvRootCharDefaultTrigger) = {
	Inherits = CharTrigger
	ThisTarget = Prov
}
(Type ProvRootCharDefaultCommand) = { ContextValidator = ProvRootCharDefaultCommand }
(ContextValidator ProvRootCharDefaultCommand) = {
	Inherits = CharCommand
	ThisTarget = Prov
}

(Type NormalEvent) = {
	Ck2SpecialEventChecking

	(Ch N Y) = { Left = "title" Right = { Key NamingInfo } }
	(Ch N Y) = { Left = "desc" Right = { Key NamingInfo } }
		
	(Ch N Y) = { Left = "picture" Right = { String PictureInfo } }
	Optional = {
		Left = "border"
		Right = GfxElement
		(Ck2CheckEventBorderPrefix IfNot = "Events.NoCheckEventBorderPrefix")
	}
	Optional = { Left = "triggered_from_code" Right = Bool }
	Optional = { Left = "is_triggered_only" Right = Bool }
	Optional = { Left = "major" Right = Bool }
	# Was never valid: https://forum.paradoxplaza.com/forum/index.php?threads/the-validator-find-errors-quickly-and-with-minimal-pain.597480/page-105#post-20657258
	#Optional = { Left = "show_from" Right = Bool }
	Optional = { Left = "show_from_from" Right = Bool }
	Optional = { Left = "show_from_from_from" Right = Bool }
	Optional = { Left = "hide_new" Right = Bool }
	Optional = { Left = "hide_window" Right = Bool }
	Optional = { Left = "sound" Right = Sound }
	Optional = { Left = "notification" Right = Bool }
	Optional = { Left = "portrait" Right = { MaybeEventTargetChar } }
	Optional = { Left = "window" Right = String }
	Optional = { Left = "background" Right = String }
	Optional = { Left = { "hide_from" "hide_FROM" } Right = Bool }
	
	Optional = { Left = "has_global_flag" Right = String (LocalOp "chk" "[R]" AddChecker GlobalFlag) }
	(Ch N Y) = { Left = { "has_dlc" "lacks_dlc" } Right = Dlc }

	# Should have at least one of these
	OneOf = { "mean_time_to_happen" "is_triggered_only" }
	
	NodeSwitcher = {
		Node = "major"
		Default = {
			(Child IfNot = Events.CheckForEventsWithNoOptions) = { Left = "option" Right = Option }
			(Required If = Events.CheckForEventsWithNoOptions) = { Left = "option" Right = Option }
		}
		MarkChecked = False
		Switch = {
			"yes" = {
				(If If = c) = {
					Optional = { Left = "major_trigger" Right = CharTrigger }
					(Child IfNot = Events.CheckForEventsWithNoOptions) = { Left = "option" Right = Option }
					(Required If = Events.CheckForEventsWithNoOptions) = { Left = "option" Right = Option }
				}
				(If If = p) = {
					Optional = { Left = "major_trigger" Right = ProvRootCharDefaultTrigger }
					(Child IfNot = Events.CheckForEventsWithNoOptions) = { Left = "option" Right = MajorProvOption }
					(Required If = Events.CheckForEventsWithNoOptions) = { Left = "option" Right = MajorProvOption }
				}
				(If If = t) = {
					Optional = { Left = "major_trigger" Right = TitleTriggerThisChar }
					(Child IfNot = Events.CheckForEventsWithNoOptions) = { Left = "option" Right = Option }
					(Required If = Events.CheckForEventsWithNoOptions) = { Left = "option" Right = Option }
				}
			}
		}
	}
		
	(If If = c) = {
		Optional = { Left = "trigger" Right = CharTrigger }
		Optional = { Left = "immediate" Right = CharCommand }
		Optional = { Left = "after" Right = CharCommand }
		Optional = { Left = "fail_trigger_effect" Right = CharCommand }
	}
	
	(If If = "c;t") = {
		Optional = { Left = "has_job_title" Right = Bool }
		Optional = { Left = "is_married" Right = Bool }
		Optional = { Left = "war" Right = Bool }
		Optional = { Left = "friends" Right = Bool }
		Optional = { Left = "rivals" Right = Bool }
		Optional = { Left = "min_age" Right = PInt }
		Optional = { Left = "max_age" Right = PInt }
		Optional = { Left = "age" Right = PInt }
		Optional = { Left = "only_playable" Right = Bool }
		Optional = { Left = "only_men" Right = Bool }
		Optional = { Left = "only_women" Right = Bool }
		# Supposedly this works now
		Optional = { Left = "only_capable" Right = Bool }
		Optional = { Left = "capable_only" Right = Bool }
		Optional = { Left = "only_rulers" Right = Bool }
		Optional = { Left = "is_friendly" Right = Bool }
		Optional = { Left = "is_hostile" Right = Bool }
		Optional = { Left = "is_in_society" Right = { Bool SocietyThings } }
		Optional = { Left = "prisoner" Right = Bool }
		Optional = { Left = "is_sick" Right = Bool }
		Optional = { Left = "only_independent" Right = Bool }
		Optional = { Left = { "show_root" "show_ROOT" } Right = Bool }
		Optional = { Left = "ai" Right = Bool }
		Optional = { Left = "is_patrician" Right = Bool }
		Optional = { Left = "is_female" Right = Bool }
		Optional = { Left = "notification" Right = Bool }
		Optional = { Left = "is_part_of_plot" Right = Bool }
		Optional = { Left = "has_character_flag" Right = String (LocalOp "chk" "[R]" AddChecker CharFlag) }
		Optional = { Left = "has_character_modifier" Right = { NormalModifier TriggeredModifier } }
		Optional = { Left = "religion" Right = Religion }
		Optional = { Left = "religion_group" Right = ReligionGroup }
		Optional = { Left = "culture" Right = Culture }
		Optional = { Left = "culture_group" Right = CultureGroup }
		Optional = { Left = "offmap" Right = { Literal = "only" Literal = "allow" } }
		Optional = { Left = "in_command" Right = Bool }
		
	}
	(If If = p) = {
		Optional = { Left = "trigger" Right = ProvTrigger }
		Optional = { Left = "immediate" Right = ProvCommand }
		Optional = { Left = "after" Right = ProvCommand }
		Optional = { Left = "fail_trigger_effect" Right = ProvCommand }
		Optional = { Left = "has_flag" Right = String (LocalOp "chk" "[R]" AddChecker ProvFlag) }
	}
	(If If = t) = {
		Optional = { Left = "trigger" Right = TitleTriggerThisChar }
		Optional = { Left = "immediate" Right = TitleCommandThisChar }
		Optional = { Left = "after" Right = TitleCommandThisChar }
		Optional = { Left = "fail_trigger_effect" Right = TitleCommandThisChar }
		Optional = { Left = "has_flag" Right = String (LocalOp "chk" "[R]" AddChecker TitleFlag) }
	}
	(If If = u) = {
		Optional = { Left = "ai" Right = Bool }
		
		Optional = { Left = "trigger" Right = UnitTrigger }
		Optional = { Left = "immediate" Right = UnitCommand }
		Optional = { Left = "after" Right = UnitCommand }
		Optional = { Left = "fail_trigger_effect" Right = UnitCommand }
	}
	(If If = society_quest) = {
		Optional = { Left = "quest_target" Right = MaybeEventTargetCharProvTitle }
	}
	
	Optional = { Left = { "mean_time_to_happen" "weight_multiplier" } Right = Mtth }
}

(If If = t) = {

(Type TitleTriggerThisChar) = { ContextValidator = TitleTriggerThisChar }
(ContextValidator TitleTriggerThisChar) = {
	Inherits = TitleTrigger
	ThisTarget = Char
}

(Type TitleCommandThisChar) = { ContextValidator = TitleCommandThisChar }
(ContextValidator TitleCommandThisChar) = {
	Inherits = TitleCommand
	ThisTarget = Char
}

}

(Type Mtth) = {
	Optional = { Left = "months" Right = NnInt }
	Optional = { Left = "years" Right = NnInt }
	Optional = { Left = "days" Right = NnInt }
	Optional = { Left = "factor" Right = NnInt }
	OneOf = { "factor" "days" "months" "years" }
	AtMostOne = { "factor" "days" "months" "years" }
	(Inherits If = c) = CharWeightBase
	(Inherits If = p) = ProvWeightBase
	(Inherits If = u) = UnitWeightBase
}

(Type OptionBase) = {
	Optional = { Left = "tooltip_info_custom" Right = { Key } }
	(Ch N Y) = { Left = "name" Right = { Key NamingInfo } }
	(Optional If = c) = { Left = "ai_chance" Right = CharFactorWeight }
	(Optional If = p) = { Left = "ai_chance" Right = ProvFactorWeight }
	(Optional If = u) = { Left = "ai_chance" Right = UnitFactorWeight }
}

(Type Option) = {
	Inherits = OptionBase

	(Optional If = c) = { Left = "trigger" Right = CharTrigger }
	(Optional If = p) = { Left = "trigger" Right = ProvTrigger }
	(Optional If = u) = { Left = "trigger" Right = UnitTrigger }
	(Optional If = t) = { Left = "trigger" Right = TitleTriggerThisChar }
	
	(Inherits If = c) = CharCommand
	(Inherits If = p) = ProvCommand
	(Inherits If = u) = UnitCommand
	(Inherits If = t) = TitleCommandThisChar
	
	(Optional If = c) = { Left = "tooltip_info" Right = { Type = Trait Literal = martial Literal = stewardship Literal = intrigue Literal = diplomacy Literal = learning Type = Yes Literal = combat_rating Type = Key } }
	(Optional If = c) = { Left = "tooltip_info_modifier" Right = { NormalModifier TriggeredModifier } }
}

(Type MajorProvOption) = {
	Inherits = OptionBase
	
	Optional = { Left = "trigger" Right = ProvRootCharDefaultTrigger }
	Inherits = ProvRootCharDefaultCommand
}
















